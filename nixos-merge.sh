#!/usr/bin/env bash

# NixOS Flake Branch Merge Script
# Bu script e14u7 branch'ındaki değişiklikleri x1c6'ya merge eder
# ama belirli dosyaları hariç tutar

set -e # Hata durumunda scripti durdur

# Renkli çıktı için
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Exclude edilecek dosyalar
EXCLUDE_FILES=(
	"modules/home/hyprland/config.nix"
	"modules/core/power/default.nix"
	"hosts/hay/hardware-configuration.nix"
	"flake.json"
	"flake.lock"
)

# Kaynak ve hedef branch'lar
SOURCE_BRANCH="e14u7"
TARGET_BRANCH="x1c6"

echo -e "${BLUE}🔄 NixOS Branch Merge Script${NC}"
echo -e "${BLUE}═══════════════════════════════${NC}"

# Git repo'da olduğumuzu kontrol et
if ! git rev-parse --git-dir >/dev/null 2>&1; then
	echo -e "${RED}❌ Bu dizin bir git repository değil!${NC}"
	exit 1
fi

# Branch'ların var olduğunu kontrol et
if ! git show-ref --verify --quiet refs/heads/$SOURCE_BRANCH; then
	echo -e "${RED}❌ $SOURCE_BRANCH branch'ı bulunamadı!${NC}"
	exit 1
fi

if ! git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
	echo -e "${RED}❌ $TARGET_BRANCH branch'ı bulunamadı!${NC}"
	exit 1
fi

# Temiz working directory kontrolü
if [ -n "$(git status --porcelain)" ]; then
	echo -e "${YELLOW}⚠️  Working directory temiz değil. Devam etmek istiyor musunuz? (y/N)${NC}"
	read -r response
	if [[ ! "$response" =~ ^[Yy]$ ]]; then
		echo -e "${RED}❌ İşlem iptal edildi${NC}"
		exit 1
	fi
fi

# Mevcut branch'ı kaydet
CURRENT_BRANCH=$(git branch --show-current)
echo -e "${BLUE}📍 Mevcut branch: $CURRENT_BRANCH${NC}"

# Target branch'a geç
echo -e "${BLUE}🔄 $TARGET_BRANCH branch'ına geçiliyor...${NC}"
git checkout $TARGET_BRANCH

# Source branch'dan tüm dosyaları getir (ama commit etme)
echo -e "${BLUE}📥 $SOURCE_BRANCH branch'ındaki dosyalar getiriliyor...${NC}"
git checkout $SOURCE_BRANCH -- .

# Exclude edilecek dosyaları unstage et ve eski hallerine döndür
echo -e "${BLUE}🚫 Exclude edilecek dosyalar işleniyor...${NC}"
for file in "${EXCLUDE_FILES[@]}"; do
	if [ -f "$file" ]; then
		echo -e "${YELLOW}   - $file exclude ediliyor...${NC}"
		git reset HEAD "$file" 2>/dev/null || true
		git checkout HEAD -- "$file" 2>/dev/null || true
	else
		echo -e "${YELLOW}   - $file bulunamadı, atlanıyor...${NC}"
	fi
done

# Staging area'daki dosyaları göster
echo -e "${BLUE}📋 Merge edilecek dosyalar:${NC}"
git diff --cached --name-only | while read -r file; do
	echo -e "${GREEN}   + $file${NC}"
done

# Kullanıcıdan onay al
echo -e "${YELLOW}🤔 Bu değişiklikleri commit etmek istiyor musunuz? (y/N)${NC}"
read -r response

if [[ "$response" =~ ^[Yy]$ ]]; then
	# Commit mesajı oluştur
	COMMIT_MSG="Merge from $SOURCE_BRANCH (excluding specific files)

Excluded files:
$(printf '- %s\n' "${EXCLUDE_FILES[@]}")

Auto-generated by nixos-merge script"

	# Commit et
	git add .
	git commit -m "$COMMIT_MSG"

	echo -e "${GREEN}✅ Merge işlemi tamamlandı!${NC}"
	echo -e "${GREEN}📝 Commit mesajı: 'Merge from $SOURCE_BRANCH (excluding specific files)'${NC}"

	# Özet göster
	echo -e "${BLUE}📊 İşlem özeti:${NC}"
	echo -e "${GREEN}   ✓ $SOURCE_BRANCH -> $TARGET_BRANCH merge edildi${NC}"
	echo -e "${YELLOW}   ⚠ ${#EXCLUDE_FILES[@]} dosya exclude edildi${NC}"

else
	echo -e "${YELLOW}❌ İşlem iptal edildi. Değişiklikler staging area'da bekliyor.${NC}"
	echo -e "${BLUE}💡 İpucu: 'git reset --hard HEAD' ile değişiklikleri geri alabilirsiniz${NC}"
fi

# Orijinal branch'a dönme seçeneği
if [ "$CURRENT_BRANCH" != "$TARGET_BRANCH" ]; then
	echo -e "${YELLOW}🔄 Orijinal branch ($CURRENT_BRANCH) 'a dönmek istiyor musunuz? (y/N)${NC}"
	read -r response
	if [[ "$response" =~ ^[Yy]$ ]]; then
		git checkout "$CURRENT_BRANCH"
		echo -e "${GREEN}✅ $CURRENT_BRANCH branch'ına dönüldü${NC}"
	fi
fi

echo -e "${BLUE}🎉 Script tamamlandı!${NC}"
