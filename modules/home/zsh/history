sudo nixos-rebuild switch --flake .#hay    # Rebuilds and applies the NixOS system with the specified flake configuration
nix shell nixpkgs#neofetch    # Provides temporary shell access to the specified package without permanent installation
sudo nix-collect-garbage -d    # Cleans disk space by removing unused packages and old generations
nix-env --query    # Lists all user-level installed packages
sudo systemctl status nixos-rebuild    # Shows current status and logs of the NixOS rebuild service
git add flake.nix flake.lock    # Adds NixOS flake configuration files to git staging area
git commit -m "feat: update system packages"    # Records changes with a meaningful message
nix flake update    # Updates all flake dependencies to their latest stable versions
nix search nixpkgs neovim    # Searches for neovim-related packages in nixpkgs repository
home-manager switch    # Applies the latest user environment configuration changes
rsync -avzP --delete ~/Documents/ backup:/mnt/data/    # Synchronizes files with archive mode, compression, and progress display
rsync -aAXv --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /mnt/backup    # Creates system backup excluding special system directories
rsync -aAXv --delete --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /mnt/backup    # Creates full system backup with root privileges
sudo nmap -sS -sV -O -p- 192.168.1.0/24    # Full network scan with service detection and OS identification
nmap -p 22,80,443 scanme.nmap.org    # Scans specific ports (SSH, HTTP, HTTPS) on target
sudo tcpdump -i any port 443    # Captures HTTPS traffic on all network interfaces
sudo tcpdump -i wlan0 'port 80 or port 443'    # Monitors HTTP and HTTPS traffic on wireless interface
wireshark -k -i wlan0    # Analyzes wireless network traffic in real-time with Wireshark
sudo netstat -tuln    # Lists all TCP and UDP ports and connections
ss -tuln    # Modern alternative to netstat, shows open ports and sockets
curl -I https://nixos.org    # Retrieves only HTTP headers
curl -v -k https://localhost    # Detailed connection information without SSL verification
wget -r --no-parent http://example.com    # Downloads website recursively without parent directories
htop    # Interactive system resource monitor
btop    # Modern system resource monitor with additional features
nethogs    # Monitors network usage per process
iotop    # Monitors disk I/O usage per process
nvtop    # Monitors NVIDIA GPU usage
docker ps    # Lists running containers
docker-compose up -d    # Starts services defined in docker-compose in background
docker logs -f container_name    # Follows container logs in real-time
kubectl get pods    # Lists pods in Kubernetes cluster
kubectl describe pod mypod    # Shows detailed pod information and status
kubectl logs -f deployment/myapp    # Follows deployment logs in real-time
virsh list --all    # Lists all virtual machines with their status
virsh start vm_name    # Starts specified virtual machine
virt-install --name=test-vm --vcpus=2 --memory=2048    # Creates new virtual machine with specified resources
git clone git@github.com:username/repo.git    # Clones remote repository to local machine
git checkout -b feature/new-module    # Creates and switches to new feature branch
git push origin main    # Pushes local changes to remote main branch
git rebase -i HEAD~3    # Interactive rebase of last three commits
git stash save "wip: current changes"    # Temporarily saves working directory changes
git stash pop    # Restores most recently stashed changes
git log --oneline --graph    # Shows commit history in graph format
git diff master..feature    # Shows differences between two branches
nvim ~/.config/nixos/configuration.nix    # Edits NixOS configuration file with Neovim
nvim flake.nix    # Edits flake configuration
nvim ~/Projects/nixos-config/hosts/hay/default.nix    # Edits host-specific configuration
code .    # Opens current directory in VS Code
vim .gitignore    # Edits git ignore file
nano /etc/hosts    # Edits hosts file with simple editor
journalctl -xe    # Shows system journal entries with explanations
journalctl -fu nginx    # Follows Nginx service logs
tail -f /var/log/nginx/access.log    # Follows Nginx access logs in real-time
grep -r "error" /var/log/    # Recursively searches for "error" in log directory
find / -name "*.nix" -type f    # Finds all .nix files in system
find . -type f -mtime -7    # Finds files modified in last 7 days
fd -t f -e nix    # Modern find alternative for .nix files
rg "nixpkgs" --type nix    # Quickly searches for "nixpkgs" in .nix files
fzf --preview 'bat --style=numbers --color=always {}'    # Fuzzy finder with file preview
systemctl status nginx    # Checks Nginx service status
systemctl restart postgresql    # Restarts PostgreSQL database
systemctl enable --now docker    # Enables and starts Docker service
useradd -m -G wheel newuser    # Creates new user and adds to wheel group
usermod -aG docker username    # Adds user to docker group
passwd username    # Changes user password
chown -R user:group /path/to/dir    # Changes directory ownership recursively
chmod -R 755 /path/to/dir    # Sets directory permissions recursively
tar -czvf archive.tar.gz directory/    # Creates compressed tar archive
tar -xzvf archive.tar.gz    # Extracts tar.gz archive
zip -r backup.zip directory/    # Creates zip archive
unzip archive.zip    # Extracts zip archive
scp file.txt user@remote:/path/    # Copies file to remote server
ssh-keygen -t ed25519 -C "email@example.com"    # Generates ED25519 SSH key
ssh-copy-id user@remote    # Copies SSH key to remote server
ssh -L 8080:localhost:80 user@remote    # Creates SSH tunnel with local port forwarding
tmux new -s dev    # Starts new tmux session
tmux attach -t dev    # Attaches to existing tmux session
screen -S mysession    # Creates new screen session
screen -r mysession    # Reconnects to existing screen session
ps aux | grep nginx    # Lists processes related to nginx
kill -9 1234    # Forces process termination by PID
pkill -f process_name    # Terminates process by name
top -u username    # Shows processes for specific user
free -h    # Shows memory usage in human-readable format
df -h    # Shows disk usage in human-readable format
du -sh *    # Shows size of each file and directory
lsblk    # Lists block devices
fdisk -l    # Lists disk partitions
mount /dev/sdb1 /mnt    # Mounts disk partition
umount /mnt    # Unmounts disk partition
mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sda1 /dev/sdb1    # Creates RAID1 array
cryptsetup luksFormat /dev/sda1    # Encrypts disk partition
cryptsetup luksOpen /dev/sda1 cryptroot    # Opens encrypted partition
iptables -L    # Lists firewall rules
iptables -A INPUT -p tcp --dport 80 -j ACCEPT    # Allows HTTP traffic
ufw status    # Shows UFW firewall status
ufw allow 22    # Allows SSH port
fail2ban-client status    # Shows Fail2ban status
docker build -t myapp .    # Builds image from Dockerfile
docker run -d -p 80:80 nginx    # Runs Nginx container in background
docker exec -it container_name bash    # Connects to running container
podman run -it ubuntu bash    # Runs Ubuntu container interactively
distrobox enter dev    # Enters development container
flatpak list    # Lists installed Flatpak applications
flatpak update    # Updates Flatpak applications
pip install --user package    # Installs Python package for user
npm install -g package    # Installs global npm package
yarn global add package    # Installs global yarn package
cargo install ripgrep    # Installs Rust package
rustup update    # Updates Rust toolchain
go get github.com/user/repo    # Downloads Go package
python -m venv venv    # Creates Python virtual environment
source venv/bin/activate    # Activates Python virtual environment
deactivate    # Exits Python virtual environment
postgresql_setup initdb    # Initializes PostgreSQL database
createdb mydb    # Creates new PostgreSQL database
psql -U postgres    # Connects to PostgreSQL as postgres user
mysql -u root -p    # Connects to MySQL as root
redis-cli    # Launches Redis command line interface
mongodb    # Starts MongoDB shell
nix develop    # Starts development environment
direnv allow    # Accepts direnv configuration
lorri daemon    # Starts Lorri background service
nix profile install nixpkgs#package    # Installs package to user profile
nix-shell -p python3    # Starts temporary shell with Python3
man nixos-rebuild    # Shows NixOS rebuild manual
info nix-env    # Shows detailed nix-env information
tldr rsync    # Shows quick rsync guide
cheat tar    # Shows tar command tips
nixos-option services.nginx.enable    # Queries Nginx service option
nix repl    # Starts Nix interactive shell
nix-instantiate --eval    # Evaluates Nix expression
nix build    # Builds Nix package
nix run nixpkgs#hello    # Runs hello package
sudo nixos-rebuild test --flake .#hay    # Tests flake configuration
sudo nixos-rebuild build --flake .#hay    # Builds flake configuration
nix flake init    # Initializes new flake project
nix edit nixpkgs.nginx    # Edits Nginx package definition
nix-shell -p nix-info --run "nix-info -m"    # Shows system Nix information
home-manager generations    # Lists home-manager generations
nix-env --list-generations    # Lists Nix package generations
nix-collect-garbage --delete-older-than 30d    # Deletes generations older than 30 days
nixos-rebuild switch --upgrade    # Upgrades system and switches to new configuration
sudo nix-channel --update    # Updates Nix channels
nix-env -qaP | grep -i neovim    # Searches for Neovim packages
which nvim    # Shows nvim executable location
type -a ls    # Shows all versions of ls command
whereis python    # Finds all Python-related file locations
file /usr/bin/python    # Determines Python file type
ldd $(which bash)    # Shows bash library dependencies
strace ls    # Shows ls command system calls
ltrace cat /etc/hostname    # Shows cat command library calls
date -u +"%Y-%m-%d %H:%M:%S"    # Formats UTC time
timedatectl set-timezone UTC    # Sets system timezone to UTC
hwclock --systohc    # Synchronizes system time to hardware clock
uptime    # Shows system uptime
w    # Shows logged-in users and their activities
who    # Lists logged-in users
last    # Shows last login records
lastlog    # Shows last login information for all users
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis status    # Shows chassis status
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power status    # Shows power status
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power on    # Powers on system
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power off    # Powers off system
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power reset    # Resets system
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power cycle    # Power cycles system
ipmitool user list 1    # Lists users
ipmitool user summary 1    # Shows user summary
ipmitool user set name 2 operator    # Changes user 2's name
ipmitool user set password 2 newpassword    # Changes user 2's password
ipmitool user priv 2 4 1    # Grants administrator privileges to user 2
ipmitool user enable 2    # Enables user 2
ipmitool user disable 2    # Disables user 2
ipmitool channel getaccess 1 2    # Shows user 2's channel 1 access
ipmitool lan print 1    # Shows channel 1 network settings
ipmitool lan set 1 ipaddr 192.168.1.101    # Sets IP address
ipmitool lan set 1 netmask 255.255.255.0    # Sets subnet mask
ipmitool lan set 1 gateway 192.168.1.1    # Sets gateway
ipmitool lan set 1 ipsrc static    # Sets static IP configuration
ipmitool lan set 1 ipsrc dhcp    # Sets DHCP configuration
ipmitool lan set 1 access on    # Enables LAN access
ipmitool lan set 1 auth ADMIN MD5    # Sets MD5 authentication for admin
for i in {1..10}; do echo $i; done    # Prints numbers from 1 to 10
for f in *.txt; do mv "$f" "${f%.txt}.md"; done    # Converts all .txt files to .md
for d in */; do (cd "$d" && git pull); done    # Executes git pull in each subdirectory
for p in $(ps aux | grep 'nginx' | awk '{print $2}'); do kill -9 $p; done    # Terminates all nginx processes
for ip in 192.168.1.{1..254}; do ping -c 1 $ip | grep "64 bytes" & done    # Performs network scan
for u in $(cat users.txt); do useradd $u && echo "User $u created"; done    # Bulk user creation
for f in *; do echo "${f%%.*}"; done    # Lists all filenames without extensions
for i in {1..5}; do mkdir "dir$i" && touch "dir$i/file$i"; done    # Creates directories and files
for pid in /proc/[0-9]*; do echo $(basename $pid); done    # Lists PIDs of all running processes
for f in *.log; do gzip "$f"; done    # Compresses all log files
for s in $(systemctl list-units --type=service --state=active --plain --no-legend | awk '{print $1}'); do echo $s; done    # Lists active services
for h in $(cat hosts.txt); do ssh $h 'uptime'; done    # Checks uptime on multiple servers
for f in $(find . -type f -name "*.bak"); do rm "$f"; done    # Removes all backup files
for u in $(getent passwd | cut -d: -f1); do groups $u; done    # Lists groups for all users
for proc in $(find /proc -maxdepth 1 -type d | grep "[0-9]"); do echo $proc: $(cat $proc/cmdline 2>/dev/null); done    # Shows command lines of running processes
for pkg in $(nix-env -q); do nix-store -q --references $(which $pkg); done    # Lists package dependencies
for service in $(systemctl list-units --type=service --state=failed --plain --no-legend | awk '{print $1}'); do journalctl -u $service -n 50; done    # Shows logs of failed services
for disk in $(lsblk -no name | grep "sd"); do smartctl -a /dev/$disk; done    # Shows SMART information for all disks
for port in {20..80}; do nc -zvw1 localhost $port 2>&1; done    # Performs port scan
for ip in $(netstat -tn 2>/dev/null | grep ':80 ' | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head); do whois $ip; done    # Analyzes IPs connecting to port 80
for host in $(cat hosts.txt); do ssh -n $host "uname -a; uptime; df -h" 2>/dev/null; done    # Checks multiple server status
for iface in $(ip -o -4 addr show | awk '{print $2}'); do ethtool $iface 2>/dev/null; done    # Checks all network interface status
for dir in */; do du -sh "$dir" 2>/dev/null; done | sort -hr    # Lists subdirectory sizes in descending order
for file in $(find . -type f -mtime -1); do cp --parents "$file" /backup/$(date +%Y%m%d)/; done    # Backs up files modified in last 24 hours
for ext in jpg png gif; do find . -type f -name "*.$ext" -exec convert {} -resize 800x600 {}.resized \;; done    # Resizes all images
for f in $(find . -type f -name "*.log"); do tail -n 100 "$f" > "$f.last100"; done    # Gets last 100 lines of all log files
for derivation in $(nix-store -q --references /run/current-system/sw); do nix-store -q --referrers $derivation; done    # Shows system package dependency tree
for pkg in $(nix-env -q); do nix why-depends /run/current-system $pkg; done    # Explains package dependencies
for channel in $(nix-channel --list | cut -d' ' -f1); do nix-channel --update $channel; done    # Updates all channels
for gen in $(home-manager generations | cut -d' ' -f7); do nix-store -q --referrers $gen; done    # Shows home-manager generation dependencies
for container in $(docker ps -q); do docker stats --no-stream $container; done    # Shows resource usage of running containers
for image in $(docker images -q); do docker history $image --no-trunc; done    # Shows layer history of all images
for volume in $(docker volume ls -q); do docker volume inspect $volume; done    # Shows details of all volumes
for network in $(docker network ls -q); do docker network inspect $network; done    # Shows network configuration
for branch in $(git branch -r | grep -v HEAD); do echo -e "\n$branch:" && git log --pretty=format:"%ai - %s" $branch | head -n 5; done    # Shows recent commits of remote branches
for repo in */; do (cd "$repo" && git status -s && echo); done    # Checks git status in all subdirectories
for tag in $(git tag); do echo "Tag: $tag" && git show $tag --quiet --pretty="format:%ai %s"; done    # Shows date and message for all tags
for commit in $(git log --pretty=format:"%h" -n 10); do git show --stat $commit; done    # Shows change statistics for last 10 commits
for sensor in $(ipmitool sensor list | cut -d'|' -f1); do ipmitool sensor get "$sensor"; done    # Shows all sensor details
for user in $(ipmitool user list | awk '{print $1}' | grep -v "^ID"); do ipmitool user summary $user; done    # Shows summary for all IPMI users
for channel in {1..15}; do ipmitool lan print $channel 2>/dev/null; done    # Checks all LAN channel configurations
for fru in $(ipmitool fru list | cut -d' ' -f1); do ipmitool fru print $fru; done    # Lists all FRU information
for db in $(psql -lt | cut -d'|' -f1 | grep -v template); do pg_dump -C $db > "${db}_$(date +%Y%m%d).sql"; done    # Backs up all PostgreSQL databases
for table in $(mysql -N -e 'show tables' mydb); do mysql -e "select count(*) from $table" mydb; done    # Shows row count for all MySQL tables
for db in $(mongo --quiet --eval "db.getMongo().getDBNames()"); do mongodump --db=$db; done    # Backs up all MongoDB databases
for index in $(redis-cli keys "*"); do redis-cli type $index; done    # Shows type of all Redis keys
for user in $(cut -d: -f1 /etc/passwd); do last $user | head -n 1; done    # Shows last login time for all users
for pid in $(ps -ef | grep defunct | awk '{print $2}'); do kill -9 $pid; done    # Cleans up zombie processes
for job in $(atq | cut -f1); do at -c $job; done    # Shows content of scheduled jobs
for service in $(systemctl list-units --type=service --all --no-legend | awk '{print $1}'); do systemctl status $service; done    # Checks status of all services
for f in *.py; do python -m py_compile $f; done    # Compiles all Python files
for module in $(pip freeze); do pip show $module; done    # Shows details of installed Python packages
for venv in ~/.virtualenvs/*; do source $venv/bin/activate && pip list && deactivate; done    # Lists packages in all virtual environments
for script in $(find . -name "*.py"); do pylint $script; done    # Lints all Python files
for key in ~/.ssh/id_*; do ssh-keygen -l -f $key; done    # Shows summary of all SSH keys
for host in $(cat ~/.ssh/config | grep "Host " | cut -d' ' -f2); do ssh -q $host "uptime"; done    # Checks uptime of SSH configured hosts
for port in $(netstat -tuln | grep LISTEN | awk '{print $4}' | cut -d: -f2); do echo "Port $port is open"; done    # Lists open ports
for cert in $(find /etc/ssl -name "*.crt"); do openssl x509 -noout -subject -dates -in $cert; done    # Shows SSL certificate details

# Network scanning commands
nmap -sn 192.168.1.0/24    # Performs ping scan to find active hosts
nmap -PS22,80,443 192.168.1.0/24    # TCP SYN ping scan of specific ports
nmap -PA22,80,443 192.168.1.0/24    # TCP ACK ping scan
nmap -PU53,161,162 192.168.1.0/24    # UDP ping scan
nmap -PE -PP -PS443 192.168.1.0/24    # Combination of ICMP, timestamp, and TCP-SYN
nmap -sS -p- --min-rate 5000 192.168.1.0/24    # Fast SYN scan
nmap -sT -p- -Pn 192.168.1.100    # Full TCP connect scan
nmap -sU -p 53,161,162 --min-rate 1000 192.168.1.0/24    # Fast UDP scan
nmap -sV -sC -p- -T4 192.168.1.100    # Version and script scan
nmap -sS -sV -O -p- --version-intensity 9 192.168.1.100    # Detailed version detection
nmap -A -T4 -v -Pn 192.168.1.0/24    # Aggressive scan with all details
nmap -O --osscan-guess 192.168.1.100    # OS detection with guessing
nmap -sV --version-all 192.168.1.100    # Runs all version detection tests
nmap -p- -sV --version-intensity 5 192.168.1.100    # Medium level version detection
nmap --script vuln 192.168.1.100    # Vulnerability scan
nmap --script ssl-enum-ciphers -p 443 192.168.1.100    # SSL/TLS cipher analysis
nmap --script http-* -p 80,443 192.168.1.100    # All HTTP scripts
nmap --script smb-* -p 445 192.168.1.100    # SMB security checks
nmap --script dns-* -p 53 192.168.1.100    # DNS scanning and enumeration
nmap --script mysql-* -p 3306 192.168.1.100    # MySQL security checks
nmap -sS -oA scan_results 192.168.1.0/24    # Output in all formats
nmap -sS -oX scan.xml 192.168.1.0/24    # XML format output
nmap -sS -oG scan.grep 192.168.1.0/24    # Grepable format output
nmap -sS -oN scan.nmap 192.168.1.0/24    # Normal format output
nmap --stylesheet https://svn.nmap.org/nmap/docs/nmap.xsl -sS -oX scan.xml 192.168.1.0/24    # HTML report generation
nmap -f -sS -sV 192.168.1.100    # Fragmented packet scan
nmap -D RND:10 192.168.1.100    # Decoy scan with 10 random IPs
nmap --spoof-mac Apple 192.168.1.100    # MAC address spoofing
nmap --data-length 25 192.168.1.100    # Custom packet length
nmap --randomize-hosts 192.168.1.0/24    # Random host order
nmap -T0 192.168.1.100    # Paranoid timing
nmap -T5 --min-parallelism 50 192.168.1.0/24    # Insane timing
nmap --max-retries 2 192.168.1.0/24    # Limited retry attempts
nmap --min-rate 300 --max-rate 500 192.168.1.0/24    # Rate limiting
nmap --scan-delay 1s 192.168.1.100    # Adds delay between probes
nmap -p http* 192.168.1.100    # HTTP-related ports only
nmap -p T:21-25,80,443 192.168.1.100    # Specific TCP ports
nmap -p U:53,161,162 192.168.1.100    # Specific UDP ports
nmap -p- --top-ports 20 192.168.1.100    # Top 20 ports only
nmap -r -p1-1024 192.168.1.100    # Sequential port scan
nmap -sV --allports 192.168.1.100    # Version detection on all ports
nmap -sV --version-intensity 9 192.168.1.100    # Maximum version detection
nmap -sV --version-light 192.168.1.100    # Light version detection
nmap -sV --version-trace 192.168.1.100    # Version detection details
nmap -A --reason 192.168.1.100    # Shows port state reasons
nmap -sS -sV -O -T4 --traceroute 192.168.1.100    # Comprehensive system analysis
nmap -p- -sV -sC --script=vuln -T4 192.168.1.100    # Security-focused scan
nmap -Pn -sS -sV -O --osscan-limit 192.168.1.100    # Stealth system detection
nmap -sS -sV --script=default,safe,auth 192.168.1.100    # Safe script scan
nmap -A -v --script=http-enum,http-headers 192.168.1.100    # Web server analysis
