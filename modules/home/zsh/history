sudo nixos-rebuild switch --flake .#hay    # NixOS sistemini belirtilen flake konfigürasyonu ile yeniden derler ve uygular
nix shell nixpkgs#neofetch    # Belirtilen paketi geçici bir kabukta kullanıma sunar, kalıcı kurulum yapmaz
sudo nix-collect-garbage -d    # Kullanılmayan paketleri ve eski nesilleri silerek disk alanı temizler
nix-env --query    # Kullanıcı seviyesinde yüklenmiş tüm paketleri listeler
sudo systemctl status nixos-rebuild    # NixOS sistem derleme servisinin mevcut durumunu ve loglarını gösterir
git add flake.nix flake.lock    # NixOS flake yapılandırma dosyalarını git izleme alanına ekler
git commit -m "feat: update system packages"    # Yapılan değişiklikleri anlamlı bir mesaj ile kayıt altına alır
nix flake update    # Tüm flake bağımlılıklarını en son kararlı sürümlerine günceller
nix search nixpkgs neovim    # Nixpkgs deposunda neovim ile ilgili paketleri arar ve listeler
home-manager switch    # Kullanıcı ortam yapılandırmalarını en son değişikliklere göre uygular
rsync -avzP --delete ~/Documents/ backup:/mnt/data/    # Dosyaları arşiv modunda, sıkıştırarak ve ilerlemeyi göstererek senkronize eder
rsync -aAXv --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /mnt/backup    # Sistem genelinde yedekleme yapar, özel sistem dizinlerini hariç tutar
sudo rsync -aAXv --delete --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /mnt/backup    # Root yetkisiyle tam sistem yedeklemesi yapar
sudo nmap -sS -sV -O -p- 192.168.1.0/24    # Ağdaki tüm cihazların tüm portlarını TCP SYN taraması ile kontrol eder, servis ve işletim sistemi tespiti yapar
nmap -p 22,80,443 scanme.nmap.org    # Belirtilen hedefin sadece SSH, HTTP ve HTTPS portlarını tarar
sudo tcpdump -i any port 443    # Tüm ağ arayüzlerindeki HTTPS trafiğini yakalar ve gösterir
sudo tcpdump -i wlan0 'port 80 or port 443'    # Kablosuz arayüzdeki HTTP ve HTTPS trafiğini izler
wireshark -k -i wlan0    # Kablosuz ağ trafiğini gerçek zamanlı olarak Wireshark ile analiz eder
sudo netstat -tuln    # Sistemdeki tüm TCP ve UDP bağlantı noktalarını listeler
ss -tuln    # Modern netstat alternatifi, açık port ve soketleri gösterir
curl -I https://nixos.org    # Sadece HTTP başlık bilgilerini getirir
curl -v -k https://localhost    # SSL doğrulaması olmadan detaylı bağlantı bilgilerini gösterir
wget -r --no-parent http://example.com    # Belirtilen web sitesini alt dizinleriyle birlikte indirir
htop    # İnteraktif sistem kaynak kullanımı monitörü
btop    # Modern ve gelişmiş sistem monitörü
nethogs    # Prosesler bazında ağ kullanımını izler
iotop    # Disk I/O kullanımını prosesler bazında gösterir
nvtop    # NVIDIA GPU kullanımını izler
docker ps    # Çalışan konteynerleri listeler
docker-compose up -d    # Docker-compose ile tanımlı servisleri arka planda başlatır
docker logs -f container_name    # Konteyner loglarını canlı olarak takip eder
kubectl get pods    # Kubernetes cluster'ındaki podları listeler
kubectl describe pod mypod    # Pod detaylarını ve durumunu gösterir
kubectl logs -f deployment/myapp    # Deployment loglarını canlı izler
virsh list --all    # Tüm sanal makineleri durumlarıyla birlikte listeler
virsh start vm_name    # Belirtilen sanal makineyi başlatır
virt-install --name=test-vm --vcpus=2 --memory=2048    # Yeni bir sanal makine oluşturur
git clone git@github.com:username/repo.git    # Uzak depoyu yerel makineye kopyalar
git checkout -b feature/new-module    # Yeni bir özellik dalı oluşturur ve ona geçer
git push origin main    # Yerel değişiklikleri uzak ana dala gönderir
git rebase -i HEAD~3    # Son üç commit'i interaktif olarak düzenler
git stash save "wip: current changes"    # Çalışma alanındaki değişiklikleri geçici olarak kaydeder
git stash pop    # En son stash'lenen değişiklikleri geri getirir
git log --oneline --graph    # Commit geçmişini grafik formatında gösterir
git diff master..feature    # İki dal arasındaki farkları gösterir
nvim ~/.config/nixos/configuration.nix    # NixOS yapılandırma dosyasını Neovim ile düzenler
nvim flake.nix    # Flake yapılandırmasını düzenler
nvim ~/Projects/nixos-config/hosts/hay/default.nix    # Host-spesifik yapılandırmayı düzenler
code .    # Mevcut dizini VS Code ile açar
vim .gitignore    # Git yoksayma dosyasını düzenler
nano /etc/hosts    # Host dosyasını basit editör ile düzenler
journalctl -xe    # Sistem günlüklerinin sonunu detaylı açıklamalarla gösterir
journalctl -fu nginx    # Nginx servis loglarını canlı takip eder
tail -f /var/log/nginx/access.log    # Nginx erişim loglarını canlı izler
grep -r "error" /var/log/    # Tüm log dizininde "error" kelimesini arar
find / -name "*.nix" -type f    # Sistemdeki tüm .nix dosyalarını bulur
find . -type f -mtime -7    # Son 7 günde değiştirilmiş dosyaları bulur
fd -t f -e nix    # Modern find alternatifi ile .nix uzantılı dosyaları bulur
rg "nixpkgs" --type nix    # .nix dosyalarında "nixpkgs" kelimesini hızlıca arar
fzf --preview 'bat --style=numbers --color=always {}'    # Bulanık arama ile dosya önizleme
systemctl status nginx    # Nginx servisinin durumunu kontrol eder
systemctl restart postgresql    # PostgreSQL veritabanını yeniden başlatır
systemctl enable --now docker    # Docker servisini etkinleştirir ve başlatır
useradd -m -G wheel newuser    # Yeni bir kullanıcı oluşturur ve wheel grubuna ekler
usermod -aG docker username    # Kullanıcıyı docker grubuna ekler
passwd username    # Kullanıcı şifresini değiştirir
chown -R user:group /path/to/dir    # Dizin sahipliğini recursif olarak değiştirir
chmod -R 755 /path/to/dir    # Dizin izinlerini recursif olarak ayarlar
tar -czvf archive.tar.gz directory/    # Dizini tar.gz formatında arşivler
tar -xzvf archive.tar.gz    # tar.gz arşivini açar
zip -r backup.zip directory/    # Dizini zip formatında arşivler
unzip archive.zip    # Zip arşivini açar
scp file.txt user@remote:/path/    # Dosyayı uzak sunucuya kopyalar
ssh-keygen -t ed25519 -C "email@example.com"    # ED25519 SSH anahtarı oluşturur
ssh-copy-id user@remote    # SSH anahtarını uzak sunucuya kopyalar
ssh -L 8080:localhost:80 user@remote    # Yerel port yönlendirmesi ile SSH tüneli oluşturur
tmux new -s dev    # Yeni bir tmux oturumu başlatır
tmux attach -t dev    # Var olan tmux oturumuna bağlanır
screen -S mysession    # Yeni bir screen oturumu başlatır
screen -r mysession    # Var olan screen oturumuna bağlanır
ps aux | grep nginx    # Nginx ile ilgili çalışan süreçleri listeler
kill -9 1234    # Belirtilen PID'e sahip süreci zorla sonlandırır
pkill -f process_name    # İsme göre süreç sonlandırır
top -u username    # Belirli kullanıcının süreçlerini gösterir
free -h    # Bellek kullanımını insan okunabilir formatta gösterir
df -h    # Disk kullanımını insan okunabilir formatta gösterir
du -sh *    # Her dosya ve dizinin boyutunu gösterir
lsblk    # Blok cihazlarını listeler
fdisk -l    # Disk bölümlerini listeler
mount /dev/sdb1 /mnt    # Disk bölümünü monte eder
umount /mnt    # Disk bölümünü ayırır
mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/sda1 /dev/sdb1    # RAID1 dizisi oluşturur
cryptsetup luksFormat /dev/sda1    # Disk bölümünü şifreler
cryptsetup luksOpen /dev/sda1 cryptroot    # Şifreli disk bölümünü açar
iptables -L    # Güvenlik duvarı kurallarını listeler
iptables -A INPUT -p tcp --dport 80 -j ACCEPT    # HTTP trafiğine izin verir
ufw status    # UFW güvenlik duvarı durumunu gösterir
ufw allow 22    # SSH portuna izin verir
fail2ban-client status    # Fail2ban durumunu gösterir
docker build -t myapp .    # Dockerfile'dan imaj oluşturur
docker run -d -p 80:80 nginx    # Nginx konteynerini arkaplanda çalıştırır
docker exec -it container_name bash    # Çalışan konteynere bağlanır
podman run -it ubuntu bash    # Ubuntu konteynerini interaktif modda çalıştırır
distrobox enter dev    # Geliştirme konteynerine girer
flatpak list    # Yüklü Flatpak uygulamalarını listeler
flatpak update    # Flatpak uygulamalarını günceller
pip install --user package    # Python paketini kullanıcı dizinine kurar
npm install -g package    # Global npm paketi kurar
yarn global add package    # Global yarn paketi kurar
cargo install ripgrep    # Rust paketi kurar
rustup update    # Rust toolchain'i günceller
go get github.com/user/repo    # Go paketi indirir
python -m venv venv    # Python sanal ortamı oluşturur
source venv/bin/activate    # Python sanal ortamını aktifleştirir
deactivate    # Python sanal ortamından çıkar
postgresql_setup initdb    # PostgreSQL veritabanını başlatır
createdb mydb    # Yeni PostgreSQL veritabanı oluşturur
psql -U postgres    # PostgreSQL komut satırına bağlanır
mysql -u root -p    # MySQL'e root olarak bağlanır
redis-cli    # Redis komut satırı arayüzü
mongodb    # MongoDB kabuğunu başlatır
nix develop    # Geliştirme ortamını başlatır
direnv allow    # Direnv konfigürasyonunu kabul eder
lorri daemon    # Lorri arka plan servisini başlatır
nix profile install nixpkgs#package  
nix-shell -p python3    # Python3 içeren geçici kabuk başlatır
man nixos-rebuild    # NixOS rebuild kılavuzunu gösterir
info nix-env    # Nix-env detaylı bilgilerini gösterir
tldr rsync    # Rsync için hızlı kullanım kılavuzu
cheat tar    # Tar komutları için ipuçları
nixos-option services.nginx.enable    # Nginx servis seçeneğini sorgular
nix repl    # Nix interaktif kabuğunu başlatır
nix-instantiate --eval    # Nix ifadesini değerlendirir
nix build    # Nix paketi derler
nix run nixpkgs#hello    # Hello paketini çalıştırır
sudo nixos-rebuild test --flake .#hay    # Flake konfigürasyonunu test eder
sudo nixos-rebuild build --flake .#hay    # Flake konfigürasyonunu derler
nix flake init    # Yeni flake projesi başlatır
nix edit nixpkgs.nginx    # Nginx paket tanımını düzenler
nix-shell -p nix-info --run "nix-info -m"    # Sistem Nix bilgilerini gösterir
home-manager generations    # Home-manager nesillerini listeler
nix-env --list-generations    # Nix paket nesillerini listeler
nix-collect-garbage --delete-older-than 30d    # 30 günden eski nesilleri siler
nixos-rebuild switch --upgrade    # Sistemi yükseltir ve yeni konfigürasyona geçer
sudo nix-channel --update    # Nix kanallarını günceller
nix-env -qaP | grep -i neovim    # Neovim paketlerini arar
which nvim    # Nvim çalıştırılabilir dosya konumunu gösterir
type -a ls    # ls komutunun tüm versiyonlarını gösterir
whereis python    # Python ile ilgili tüm dosya konumlarını bulur
file /usr/bin/python    # Python dosya türünü belirler
ldd $(which bash)    # Bash'in bağımlı olduğu kütüphaneleri gösterir
strace ls    # ls komutunun sistem çağrılarını gösterir
ltrace cat /etc/hostname    # cat komutunun kütüphane çağrılarını gösterir
date -u +"%Y-%m-%d %H:%M:%S"    # UTC zamanını formatlar
timedatectl set-timezone UTC    # Sistem saat dilimini UTC'ye ayarlar
hwclock --systohc    # Sistem saatini donanım saatine senkronize eder
uptime    # Sistemin ne kadar süredir çalıştığını gösterir
w    # Oturum açmış kullanıcıları ve aktivitelerini gösterir
who    # Oturum açmış kullanıcıları listeler
last    # Son oturum açma kayıtlarını gösterir
lastlog    # Tüm kullanıcıların son oturum açma bilgilerini gösterir
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis status    # Şasi durumunu gösterir
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power status    # Güç durumunu gösterir
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power on    # Sistemi açar
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power off    # Sistemi kapatır
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power reset    # Sistemi resetler
ipmitool -I lanplus -H 192.168.1.100 -U admin -P password chassis power cycle    # Güç döngüsü yapar
ipmitool user list 1    # Kullanıcıları listeler
ipmitool user summary 1    # Kullanıcı özetini gösterir
ipmitool user set name 2 operator    # Kullanıcı 2'nin adını değiştirir
ipmitool user set password 2 newpassword    # Kullanıcı 2'nin şifresini değiştirir
ipmitool user priv 2 4 1    # Kullanıcı 2'ye yönetici yetkisi verir
ipmitool user enable 2    # Kullanıcı 2'yi aktifleştirir
ipmitool user disable 2    # Kullanıcı 2'yi devre dışı bırakır
ipmitool channel getaccess 1 2    # Kanal 1'de kullanıcı 2'nin yetkilerini gösterir
ipmitool lan print 1    # Kanal 1'in ağ ayarlarını gösterir
ipmitool lan set 1 ipaddr 192.168.1.101    # IP adresini ayarlar
ipmitool lan set 1 netmask 255.255.255.0    # Alt ağ maskesini ayarlar
ipmitool lan set 1 gateway 192.168.1.1    # Ağ geçidini ayarlar
ipmitool lan set 1 ipsrc static    # Statik IP kullanımını ayarlar
ipmitool lan set 1 ipsrc dhcp    # DHCP kullanımını ayarlar
ipmitool lan set 1 access on    # LAN erişimini açar
ipmitool lan set 1 auth ADMIN MD5    # Admin için MD5 kimlik doğrulaması ayarlar
for i in {1..10}; do echo $i; done    # 1'den 10'a kadar sayıları yazdırır
for f in *.txt; do mv "$f" "${f%.txt}.md"; done    # Tüm .txt dosyalarını .md yapar
for d in */; do (cd "$d" && git pull); done    # Her alt dizinde git pull çalıştırır
for p in $(ps aux | grep 'nginx' | awk '{print $2}'); do kill -9 $p; done    # Tüm nginx proseslerini sonlandırır
for ip in 192.168.1.{1..254}; do ping -c 1 $ip | grep "64 bytes" & done    # Ağ taraması yapar
for u in $(cat users.txt); do useradd $u && echo "User $u created"; done    # Toplu kullanıcı oluşturur
for f in *; do echo "${f%%.*}"; done    # Tüm dosyaların uzantısız isimlerini listeler
for i in {1..5}; do mkdir "dir$i" && touch "dir$i/file$i"; done    # Dizinler ve dosyalar oluşturur
for pid in /proc/[0-9]*; do echo $(basename $pid); done    # Çalışan tüm proseslerin PID'lerini listeler
for f in *.log; do gzip "$f"; done    # Tüm log dosyalarını sıkıştırır
for s in $(systemctl list-units --type=service --state=active --plain --no-legend | awk '{print $1}'); do echo $s; done    # Aktif servisleri listeler
for h in $(cat hosts.txt); do ssh $h 'uptime'; done    # Birden çok sunucuda uptime çalıştırır
for f in $(find . -type f -name "*.bak"); do rm "$f"; done    # Tüm .bak dosyalarını siler
for u in $(getent passwd | cut -d: -f1); do groups $u; done    # Tüm kullanıcıların gruplarını listeler
for proc in $(find /proc -maxdepth 1 -type d | grep "[0-9]"); do echo $proc: $(cat $proc/cmdline 2>/dev/null); done    # Çalışan süreçlerin komut satırlarını gösterir
for pkg in $(nix-env -q); do nix-store -q --references $(which $pkg); done    # Yüklü paketlerin bağımlılıklarını listeler
for service in $(systemctl list-units --type=service --state=failed --plain --no-legend | awk '{print $1}'); do journalctl -u $service -n 50; done    # Başarısız servislerin son loglarını gösterir
for disk in $(lsblk -no name | grep "sd"); do smartctl -a /dev/$disk; done    # Tüm disklerin SMART bilgilerini gösterir
for port in {20..80}; do nc -zvw1 localhost $port 2>&1; done    # Port taraması yapar
for ip in $(netstat -tn 2>/dev/null | grep ':80 ' | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head); do whois $ip; done    # 80 portuna bağlanan IP'leri analiz eder
for host in $(cat hosts.txt); do ssh -n $host "uname -a; uptime; df -h" 2>/dev/null; done    # Çoklu sunucu durumu kontrolü
for iface in $(ip -o -4 addr show | awk '{print $2}'); do ethtool $iface 2>/dev/null; done    # Tüm ağ arayüzlerinin durumunu kontrol eder
for dir in */; do du -sh "$dir" 2>/dev/null; done | sort -hr    # Alt dizinlerin boyutlarını büyükten küçüğe sıralar
for file in $(find . -type f -mtime -1); do cp --parents "$file" /backup/$(date +%Y%m%d)/; done    # Son 24 saatte değişen dosyaları yedekler
for ext in jpg png gif; do find . -type f -name "*.$ext" -exec convert {} -resize 800x600 {}.resized \;; done    # Tüm resimleri yeniden boyutlandırır
for f in $(find . -type f -name "*.log"); do tail -n 100 "$f" > "$f.last100"; done    # Tüm log dosyalarının son 100 satırını alır
for derivation in $(nix-store -q --references /run/current-system/sw); do nix-store -q --referrers $derivation; done    # Sistem paketlerinin bağımlılık ağacını gösterir
for pkg in $(nix-env -q); do nix why-depends /run/current-system $pkg; done    # Paketlerin neden gerekli olduğunu açıklar
for channel in $(nix-channel --list | cut -d' ' -f1); do nix-channel --update $channel; done    # Tüm kanalları günceller
for gen in $(home-manager generations | cut -d' ' -f7); do nix-store -q --referrers $gen; done    # Home-manager nesillerinin bağımlılıklarını gösterir
for container in $(docker ps -q); do docker stats --no-stream $container; done    # Çalışan konteynerlerin kaynak kullanımını gösterir
for image in $(docker images -q); do docker history $image --no-trunc; done    # Tüm imajların katman geçmişini gösterir
for volume in $(docker volume ls -q); do docker volume inspect $volume; done    # Tüm volumelerin detaylarını gösterir
for network in $(docker network ls -q); do docker network inspect $network; done    # Tüm ağların yapılandırmasını gösterir
for branch in $(git branch -r | grep -v HEAD); do echo -e "\n$branch:" && git log --pretty=format:"%ai - %s" $branch | head -n 5; done    # Uzak dalların son commitlerini gösterir
for repo in */; do (cd "$repo" && git status -s && echo); done    # Tüm alt dizinlerdeki git durumunu kontrol eder
for tag in $(git tag); do echo "Tag: $tag" && git show $tag --quiet --pretty="format:%ai %s"; done    # Tüm etiketlerin tarih ve mesajlarını gösterir
for commit in $(git log --pretty=format:"%h" -n 10); do git show --stat $commit; done    # Son 10 commitin değişiklik istatistiklerini gösterir
for sensor in $(ipmitool sensor list | cut -d'|' -f1); do ipmitool sensor get "$sensor"; done    # Tüm sensör detaylarını gösterir
for user in $(ipmitool user list | awk '{print $1}' | grep -v "^ID"); do ipmitool user summary $user; done    # Tüm IPMI kullanıcılarının özetini gösterir
for channel in {1..15}; do ipmitool lan print $channel 2>/dev/null; done    # Tüm LAN kanallarının konfigürasyonunu kontrol eder
for fru in $(ipmitool fru list | cut -d' ' -f1); do ipmitool fru print $fru; done    # Tüm FRU bilgilerini listeler
for db in $(psql -lt | cut -d'|' -f1 | grep -v template); do pg_dump -C $db > "${db}_$(date +%Y%m%d).sql"; done    # Tüm PostgreSQL veritabanlarını yedekler
for table in $(mysql -N -e 'show tables' mydb); do mysql -e "select count(*) from $table" mydb; done    # MySQL'de tüm tabloların satır sayısını gösterir
for db in $(mongo --quiet --eval "db.getMongo().getDBNames()"); do mongodump --db=$db; done    # Tüm MongoDB veritabanlarını yedekler
for index in $(redis-cli keys "*"); do redis-cli type $index; done    # Redis'teki tüm anahtarların tipini gösterir
for user in $(cut -d: -f1 /etc/passwd); do last $user | head -n 1; done    # Tüm kullanıcıların son oturum açma zamanlarını gösterir
for pid in $(ps -ef | grep defunct | awk '{print $2}'); do kill -9 $pid; done    # Zombi prosesleri temizler
for job in $(atq | cut -f1); do at -c $job; done    # Zamanlanmış görevlerin içeriğini gösterir
for service in $(systemctl list-units --type=service --all --no-legend | awk '{print $1}'); do systemctl status $service; done    # Tüm servislerin durumunu kontrol eder
for f in *.py; do python -m py_compile $f; done    # Tüm Python dosyalarını derler
for module in $(pip freeze); do pip show $module; done    # Yüklü Python paketlerinin detaylarını gösterir
for venv in ~/.virtualenvs/*; do source $venv/bin/activate && pip list && deactivate; done    # Tüm sanal ortamların paket listesini gösterir
for script in $(find . -name "*.py"); do pylint $script; done    # Tüm Python dosyalarını lintler
for key in ~/.ssh/id_*; do ssh-keygen -l -f $key; done    # Tüm SSH anahtarlarının özetini gösterir
for host in $(cat ~/.ssh/config | grep "Host " | cut -d' ' -f2); do ssh -q $host "uptime"; done    # SSH yapılandırmasındaki tüm hostların uptime'ını kontrol eder
for port in $(netstat -tuln | grep LISTEN | awk '{print $4}' | cut -d: -f2); do echo "Port $port is open"; done    # Açık portları listeler
for cert in $(find /etc/ssl -name "*.crt"); do openssl x509 -noout -subject -dates -in $cert; done    # SSL sertifikalarının detaylarını gösterir
nmap -sn 192.168.1.0/24    # Ping taraması yaparak aktif hostları bulur
nmap -PS22,80,443 192.168.1.0/24    # TCP SYN ping ile belirli portları tarar
nmap -PA22,80,443 192.168.1.0/24    # TCP ACK ping taraması yapar
nmap -PU53,161,162 192.168.1.0/24    # UDP ping taraması yapar
nmap -PE -PP -PS443 192.168.1.0/24    # ICMP, timestamp ve TCP-SYN kombinasyonu
nmap -sS -p- --min-rate 5000 192.168.1.0/24    # Hızlı SYN taraması
nmap -sT -p- -Pn 192.168.1.100    # Tam TCP bağlantı taraması
nmap -sU -p 53,161,162 --min-rate 1000 192.168.1.0/24    # Hızlı UDP taraması
nmap -sV -sC -p- -T4 192.168.1.100    # Versiyon ve script taraması
nmap -sS -sV -O -p- --version-intensity 9 192.168.1.100    # Detaylı versiyon tespiti
nmap -A -T4 -v -Pn 192.168.1.0/24    # Agresif tarama, tüm detaylar
nmap -O --osscan-guess 192.168.1.100    # İşletim sistemi tahmini
nmap -sV --version-all 192.168.1.100    # Tüm versiyon testlerini çalıştırır
nmap -p- -sV --version-intensity 5 192.168.1.100    # Orta seviye versiyon tespiti
nmap --script vuln 192.168.1.100    # Güvenlik açığı taraması
nmap --script ssl-enum-ciphers -p 443 192.168.1.100    # SSL/TLS şifreleme analizi
nmap --script http-* -p 80,443 192.168.1.100    # Tüm HTTP scriptlerini çalıştırır
nmap --script smb-* -p 445 192.168.1.100    # SMB güvenlik kontrolleri
nmap --script dns-* -p 53 192.168.1.100    # DNS tarama ve enumeration
nmap --script mysql-* -p 3306 192.168.1.100    # MySQL güvenlik kontrolleri
nmap -sS -oA scan_results 192.168.1.0/24    # Tüm formatlarda çıktı alır
nmap -sS -oX scan.xml 192.168.1.0/24    # XML formatında çıktı
nmap -sS -oG scan.grep 192.168.1.0/24    # Grep formatında çıktı
nmap -sS -oN scan.nmap 192.168.1.0/24    # Normal formatta çıktı
nmap --stylesheet https://svn.nmap.org/nmap/docs/nmap.xsl -sS -oX scan.xml 192.168.1.0/24    # HTML rapor
nmap -f -sS -sV 192.168.1.100    # Parçalanmış paketlerle tarama
nmap -D RND:10 192.168.1.100    # Rastgele 10 IP ile decoy tarama
nmap --spoof-mac Apple 192.168.1.100    # MAC adresi spoofing
nmap --data-length 25 192.168.1.100    # Paket boyutunu değiştirir
nmap -sS --randomize-hosts 192.168.1.0/24    # Host sırasını rastgele yapar
nmap -T0 192.168.1.100    # En yavaş zamanlama
nmap -T5 --min-parallelism 50 192.168.1.0/24    # En hızlı agresif tarama
nmap --max-retries 2 192.168.1.0/24    # Yeniden deneme sayısını sınırlar
nmap --min-rate 300 --max-rate 500 192.168.1.0/24    # Paket hızını kontrol eder
nmap --scan-delay 1s 192.168.1.100    # Tarama gecikmesi ekler
nmap -p http* 192.168.1.100    # HTTP ile ilgili tüm portları tarar
nmap -p T:21-25,80,443 192.168.1.100    # Belirli TCP portlarını tarar
nmap -p U:53,161,162 192.168.1.100    # Belirli UDP portlarını tarar
nmap -p- --top-ports 20 192.168.1.100    # En popüler 20 portu tarar
nmap -r -p1-1024 192.168.1.100    # Sıralı port taraması
nmap -sV --allports 192.168.1.100    # Tüm portlarda versiyon tespiti
nmap -sV --version-intensity 9 192.168.1.100    # Maksimum versiyon detayı
nmap -sV --version-light 192.168.1.100    # Hızlı versiyon taraması
nmap -sV --version-trace 192.168.1.100    # Versiyon tarama detaylarını gösterir
nmap -A --reason 192.168.1.100    # Port durumlarının nedenlerini gösterir
nmap -sS -sV -O -T4 --traceroute 192.168.1.100    # Tam kapsamlı sistem analizi
nmap -p- -sV -sC --script=vuln -T4 192.168.1.100    # Güvenlik odaklı tarama
nmap -Pn -sS -sV -O --osscan-limit 192.168.1.100    # Stealth sistem tespiti
nmap -sS -sV --script=default,safe,auth 192.168.1.100    # Güvenli script taraması
nmap -A -v --script=http-enum,http-headers 192.168.1.100    # Web sunucu analizi
for ip in $(seq 1 254); do nmap -sS -p 80 -T4 192.168.1.$ip; done    # Tüm subnet'te web sunucu arar
for port in {20..90}; do nmap -p$port -sS -T4 192.168.1.100; done    # Port aralığı taraması
for host in $(cat hosts.txt); do nmap -sS -sV -T4 $host; done    # Liste üzerinde tarama
for subnet in {0..255}; do nmap -sn 192.168.$subnet.0/24; done    # Geniş ağ keşfi
for ip in $(nmap -sn 192.168.1.0/24 -oG - | grep "Up" | cut -d" " -f2); do nmap -sV -T4 $ip; done    # İki aşamalı tarama
