#!/usr/bin/env bash
# Profile: brave-whats
# Generated by Semsumo v7.0.0-gnome-workspace-fixed (GNOME Edition - Workspace Fixed)
set -e
echo "Initializing brave-whats for GNOME/Wayland..."

# Force external monitor as primary (if connected)
if command -v xrandr >/dev/null 2>&1; then
    EXTERNAL_MONITOR=$(xrandr --query | grep " connected" | grep -v "eDP" | head -1 | awk '{print $1}')
    if [[ -n "$EXTERNAL_MONITOR" ]]; then
        echo "Setting external monitor $EXTERNAL_MONITOR as primary..."
        xrandr --output "$EXTERNAL_MONITOR" --primary
        sleep 1
    fi
fi

# ✅ FIXED: Switch to workspace FIRST and WAIT (before starting app)
if [[ "9" != "0" ]]; then
    echo "Switching to workspace 9 BEFORE starting application..."
    # GNOME workspace switching (0-based indexing)
    TARGET_WORKSPACE=$((9 - 1))
    
    if command -v gdbus >/dev/null 2>&1; then
        CURRENT_WORKSPACE=$(gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval "global.workspace_manager.get_active_workspace().index()" 2>/dev/null | grep -o '[0-9]*' || echo "")

        if [[ "$CURRENT_WORKSPACE" != "$TARGET_WORKSPACE" ]]; then
            echo "Switching to workspace 9 using gdbus (Wayland)..."
            gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval "global.workspace_manager.get_workspace_by_index($TARGET_WORKSPACE).activate(global.get_current_time())" >/dev/null 2>&1
            sleep 3  # Wait for workspace switch to complete
        else
            echo "Already on workspace 9, skipping switch."
        fi
    elif command -v wmctrl >/dev/null 2>&1; then
        # Fallback for XWayland apps
        CURRENT_WORKSPACE=$(wmctrl -d | grep '*' | awk '{print $1}' 2>/dev/null || echo "")
        
        if [[ "$CURRENT_WORKSPACE" != "$TARGET_WORKSPACE" ]]; then
            echo "Switching to workspace 9 using wmctrl (XWayland fallback)..."
            wmctrl -s "$TARGET_WORKSPACE"
            sleep 3  # Wait for workspace switch to complete
        else
            echo "Already on workspace 9, skipping switch."
        fi
    else
        echo "WARNING: Neither gdbus nor wmctrl available, cannot switch workspace"
        echo "INFO: Install with: nix-env -iA nixpkgs.wmctrl or add to configuration.nix"
    fi
fi

echo "Starting application on workspace 9..."
echo "COMMAND: profile_brave Whats --restore-last-session"
echo "VPN MODE: secure"

# Start application with VPN mode
case "secure" in
    bypass)
        if command -v mullvad >/dev/null 2>&1 && mullvad status 2>/dev/null | grep -q "Connected"; then
            if command -v mullvad-exclude >/dev/null 2>&1; then
                echo "Starting with VPN bypass (mullvad-exclude)"
                mullvad-exclude profile_brave Whats --restore-last-session &
            else
                echo "WARNING: mullvad-exclude not found, starting normally"
                echo "INFO: Install with: nix-env -iA nixpkgs.mullvad-vpn"
                profile_brave Whats --restore-last-session &
            fi
        else
            echo "VPN not connected, starting normally"
            profile_brave Whats --restore-last-session &
        fi
        ;;
    secure|*)
        if command -v mullvad >/dev/null 2>&1 && mullvad status 2>/dev/null | grep -q "Connected"; then
            echo "Starting with VPN protection"
        else
            echo "WARNING: VPN not connected! Starting without protection"
            echo "INFO: Install Mullvad with: nix-env -iA nixpkgs.mullvad-vpn"
        fi
        profile_brave Whats --restore-last-session &
        ;;
esac

# Save PID
APP_PID=$!
mkdir -p "/tmp/semsumo"
echo "$APP_PID" > "/tmp/semsumo/brave-whats.pid"
echo "Application started (PID: $APP_PID) on workspace 9"

# Wait for application to load
sleep 3

# ❌ NO window workspace moving - app should open on correct workspace

# Make fullscreen if needed
if [[ "false" == "true" ]]; then
    echo "Waiting 1 seconds for application to load..."
    sleep 1
    
    # For Wayland, use gdbus to interact with GNOME Shell
    if command -v gdbus >/dev/null 2>&1; then
        echo "Making fullscreen using gdbus (Wayland)..."
        gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval "global.display.get_focus_window().make_fullscreen()" >/dev/null 2>&1
    elif command -v wmctrl >/dev/null 2>&1; then
        echo "Making fullscreen using wmctrl (XWayland fallback)..."
        WINDOW_ID=$(wmctrl -l | tail -1 | awk '{print $1}')
        if [[ -n "$WINDOW_ID" ]]; then
            wmctrl -i -r "$WINDOW_ID" -b add,fullscreen
        fi
    else
        echo "WARNING: Neither gdbus nor wmctrl available, cannot make fullscreen"
        echo "INFO: Install wmctrl with: nix-env -iA nixpkgs.wmctrl"
        echo "INFO: You can manually press F11 to make the window fullscreen"
    fi
fi

exit 0
