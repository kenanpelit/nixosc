#!/usr/bin/env bash

#   Version: 1.1.0
#   Date: 2025-04-18
#   Author: Kenan Pelit
#   Repository: https://github.com/kenanpelit/nixosc

# Hata ayƒ±klama i√ßin strict mode
set -euo pipefail

# Renkler ve stiller
declare -A COLORS=(
	["RED"]='\033[0;31m'
	["GREEN"]='\033[0;32m'
	["YELLOW"]='\033[1;33m'
	["BLUE"]='\033[0;34m'
	["PURPLE"]='\033[0;35m'
	["CYAN"]='\033[0;36m'
	["GRAY"]='\033[0;90m'
	["NC"]='\033[0m'
	["BOLD"]='\033[1m'
)

# Temel yardƒ±mcƒ± fonksiyonlar
print_info() { echo -e "${COLORS[BLUE]}‚ÑπÔ∏è  $1${COLORS[NC]}"; }
print_success() { echo -e "${COLORS[GREEN]}‚úÖ $1${COLORS[NC]}"; }
print_warning() { echo -e "${COLORS[YELLOW]}‚ö†Ô∏è  $1${COLORS[NC]}"; }
print_error() { echo -e "${COLORS[RED]}‚ùå $1${COLORS[NC]}"; }

# Dosya durumunu formatlayan fonksiyon
format_file_status() {
	local status=$1
	local file=$2
	local counter=$3

	case "$status" in
	"??") echo -e "${counter}) ${COLORS[PURPLE]}${file}${COLORS[NC]} ${COLORS[GRAY]}(Yeni dosya)${COLORS[NC]}" ;;
	"M") echo -e "${counter}) ${COLORS[YELLOW]}${file}${COLORS[NC]} ${COLORS[GRAY]}(Deƒüi≈ütirildi)${COLORS[NC]}" ;;
	"D") echo -e "${counter}) ${COLORS[RED]}${file}${COLORS[NC]} ${COLORS[GRAY]}(Silindi)${COLORS[NC]}" ;;
	*) echo -e "${counter}) ${COLORS[CYAN]}${file}${COLORS[NC]} ${COLORS[GRAY]}($status)${COLORS[NC]}" ;;
	esac
}

# Kullanƒ±cƒ± onayƒ± alan fonksiyon
get_confirmation() {
	local prompt=$1
	local default=${2:-false}

	echo -e "\n${COLORS[YELLOW]}$prompt ${COLORS[NC]}${COLORS[GRAY]}(e/H)${COLORS[NC]}"
	read -r confirm
	[[ "$confirm" =~ ^[Ee]$ ]]
}

# √áƒ±kƒ±≈ü fonksiyonu
cleanup_and_exit() {
	local exit_code=$1
	local message=$2
	[[ -n "$message" ]] && echo -e "$message"
	exit "$exit_code"
}

# Trap tanƒ±mla - CTRL+C ve diƒüer sinyaller i√ßin temiz √ßƒ±kƒ±≈ü
trap 'cleanup_and_exit 1 "${COLORS[RED]}‚ùå ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan iptal edildi.${COLORS[NC]}"' INT TERM HUP

# Git kontrollerini yapan fonksiyon
check_git_setup() {
	[[ ! -d .git ]] && cleanup_and_exit 1 "${COLORS[RED]}‚ùå Bu dizin bir git deposu deƒüil.${COLORS[NC]}"
	command -v git &>/dev/null || cleanup_and_exit 1 "${COLORS[RED]}‚ùå Git kurulu deƒüil.${COLORS[NC]}"
	git remote get-url origin &>/dev/null || print_warning "Uzak depo ayarlanmamƒ±≈ü. Bazƒ± i≈ülevler √ßalƒ±≈ümayabilir."

	# Git versiyonunu kontrol et
	local git_version
	git_version=$(git --version | sed -E 's/git version ([0-9]+\.[0-9]+).*/\1/')
	if (($(echo "$git_version < 2.23" | bc -l))); then
		print_warning "Git versiyonunuz ($git_version) eski olabilir. Bazƒ± √∂zellikler √ßalƒ±≈ümayabilir."
	fi
}

# Branch y√∂netimi
manage_branches() {
	echo -e "\n${COLORS[BOLD]}üåø Branch ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Branch listesi (local)"
	echo "2) Branch listesi (remote)"
	echo "3) Branch olu≈ütur"
	echo "4) Branch deƒüi≈ütir"
	echo "5) Branch sil (local)"
	echo "6) Branch sil (remote)"
	echo "7) Branch'leri merge et"
	echo "8) Branch yeniden adlandƒ±r"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-8):${COLORS[NC]} ")" branch_choice

	case "$branch_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Local Branchler:${COLORS[NC]}"
		git branch
		;;
	2)
		echo -e "\n${COLORS[BOLD]}Remote Branchler:${COLORS[NC]}"
		git branch -r
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Yeni branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r new_branch
		if [[ -n "$new_branch" ]]; then
			if git --no-pager show-ref --verify --quiet "refs/heads/$new_branch"; then
				print_error "Bu isimde bir branch zaten var."
			else
				git checkout -b "$new_branch" && print_success "Branch '$new_branch' olu≈üturuldu ve ge√ßi≈ü yapƒ±ldƒ±."
			fi
		else
			print_error "Branch adƒ± bo≈ü olamaz."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Mevcut Branchler:${COLORS[NC]}"
		git branch
		echo -e "\n${COLORS[BOLD]}Ge√ßi≈ü yapƒ±lacak branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r switch_branch
		if [[ -n "$switch_branch" ]]; then
			if git --no-pager show-ref --verify --quiet "refs/heads/$switch_branch"; then
				git switch "$switch_branch" && print_success "Branch '$switch_branch'e ge√ßi≈ü yapƒ±ldƒ±."
			else
				print_error "Branch bulunamadƒ±."
			fi
		else
			print_error "Branch adƒ± bo≈ü olamaz."
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}Silinecek local branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r branch_to_delete
		if [[ -n "$branch_to_delete" ]] && git --no-pager show-ref --verify --quiet "refs/heads/$branch_to_delete"; then
			local current_branch
			current_branch=$(git branch --show-current)
			if [[ "$current_branch" == "$branch_to_delete" ]]; then
				print_error "Aktif branch silinemez. √ñnce ba≈üka bir branch'e ge√ßi≈ü yapƒ±n."
				return
			fi

			if get_confirmation "Bu branch silinecek. Emin misiniz?"; then
				if ! git branch -d "$branch_to_delete" 2>/dev/null; then
					print_warning "Bu branch merge edilmemi≈ü deƒüi≈üiklikler i√ßeriyor."
					if get_confirmation "Yine de branch silinsin mi? (force)"; then
						git branch -D "$branch_to_delete" && print_success "Branch zorla silindi."
					fi
				else
					print_success "Branch ba≈üarƒ±yla silindi."
				fi
			fi
		else
			print_error "Branch bulunamadƒ±."
		fi
		;;
	6)
		echo -e "\n${COLORS[BOLD]}Silinecek remote branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r remote_branch
		if [[ -n "$remote_branch" ]]; then
			if get_confirmation "Bu remote branch silinecek. Emin misiniz?"; then
				git push origin --delete "$remote_branch" && print_success "Remote branch ba≈üarƒ±yla silindi."
			fi
		else
			print_error "Branch adƒ± bo≈ü olamaz."
		fi
		;;
	7)
		echo -e "\n${COLORS[BOLD]}Merge edilecek branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r branch_to_merge
		if [[ -n "$branch_to_merge" ]] && git --no-pager show-ref --verify --quiet "refs/heads/$branch_to_merge"; then
			local current_branch
			current_branch=$(git branch --show-current)
			echo -e "Merge i≈ülemi: $branch_to_merge -> $current_branch"

			if get_confirmation "Bu branch merge edilecek. Emin misiniz?"; then
				if ! git merge "$branch_to_merge"; then
					print_error "Merge i≈ülemi √ßakƒ±≈ümalarla kar≈üƒ±la≈ütƒ±."
					if get_confirmation "Merge i≈ülemi iptal edilsin mi?"; then
						git merge --abort && print_warning "Merge i≈ülemi iptal edildi."
					else
						print_info "√áakƒ±≈ümalarƒ± √ß√∂z√ºn ve sonra commit edin."
					fi
				else
					print_success "Branch ba≈üarƒ±yla merge edildi."
				fi
			fi
		else
			print_error "Branch bulunamadƒ±."
		fi
		;;
	8)
		echo -e "\n${COLORS[BOLD]}Yeniden adlandƒ±rƒ±lacak branch adƒ±nƒ± girin:${COLORS[NC]}"
		read -r old_name
		if [[ -n "$old_name" ]] && git --no-pager show-ref --verify --quiet "refs/heads/$old_name"; then
			echo -e "${COLORS[BOLD]}Yeni branch adƒ±nƒ± girin:${COLORS[NC]}"
			read -r new_name
			if [[ -n "$new_name" ]]; then
				git branch -m "$old_name" "$new_name" && print_success "Branch '$old_name' -> '$new_name' olarak yeniden adlandƒ±rƒ±ldƒ±."
			else
				print_error "Yeni branch adƒ± bo≈ü olamaz."
			fi
		else
			print_error "Branch bulunamadƒ±."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Git clean i≈ülemleri
manage_clean() {
	echo -e "\n${COLORS[BOLD]}üßπ Git Clean ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Takip edilmeyen dosyalarƒ± listele"
	echo "2) Takip edilmeyen dosyalarƒ± temizle"
	echo "3) Takip edilmeyen dizinleri temizle"
	echo "4) Git ignore y√∂netimi"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-4):${COLORS[NC]} ")" clean_choice

	case "$clean_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Takip Edilmeyen Dosyalar:${COLORS[NC]}"
		git clean -n
		;;
	2)
		if get_confirmation "Takip edilmeyen t√ºm dosyalar silinecek. Emin misiniz?"; then
			git clean -f && print_success "Takip edilmeyen dosyalar temizlendi."
		fi
		;;
	3)
		if get_confirmation "Takip edilmeyen t√ºm dizinler silinecek. Emin misiniz?"; then
			git clean -fd && print_success "Takip edilmeyen dizinler temizlendi."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Git Ignore ƒ∞≈ülemleri:${COLORS[NC]}"
		echo "1) .gitignore dosyasƒ±nƒ± g√∂r√ºnt√ºle"
		echo "2) .gitignore'a yeni pattern ekle"
		echo "3) Git ignore durumunu kontrol et"
		echo "0) Geri d√∂n"

		read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-3):${COLORS[NC]} ")" ignore_choice

		case "$ignore_choice" in
		1)
			# Git repo k√∂k dizinini bul
			local git_root
			git_root=$(git rev-parse --show-toplevel)
			if [[ -f "$git_root/.gitignore" ]]; then
				echo -e "\n${COLORS[BOLD]}.gitignore ƒ∞√ßeriƒüi:${COLORS[NC]}"
				cat "$git_root/.gitignore"
			else
				print_warning ".gitignore dosyasƒ± bulunamadƒ±."
				if get_confirmation "Yeni .gitignore dosyasƒ± olu≈üturulsun mu?"; then
					touch "$git_root/.gitignore"
					print_success ".gitignore dosyasƒ± olu≈üturuldu."
				fi
			fi
			;;
		2)
			echo -e "\n${COLORS[BOLD]}Eklenecek pattern'i girin:${COLORS[NC]}"
			read -r ignore_pattern
			if [[ -n "$ignore_pattern" ]]; then
				local git_root
				git_root=$(git rev-parse --show-toplevel)
				echo "$ignore_pattern" >>"$git_root/.gitignore"
				print_success "Pattern .gitignore dosyasƒ±na eklendi."
			else
				print_error "Pattern bo≈ü olamaz."
			fi
			;;
		3)
			echo -e "\n${COLORS[BOLD]}Kontrol edilecek dosya adƒ±nƒ± girin:${COLORS[NC]}"
			read -r check_file
			if [[ -n "$check_file" ]]; then
				if git check-ignore -v "$check_file"; then
					print_info "Bu dosya ignore edilmi≈ü."
				else
					print_info "Bu dosya ignore edilmemi≈ü."
				fi
			else
				print_error "Dosya adƒ± bo≈ü olamaz."
			fi
			;;
		0) return ;;
		*) print_error "Ge√ßersiz se√ßim." ;;
		esac
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Git config i≈ülemleri
manage_config() {
	echo -e "\n${COLORS[BOLD]}‚öôÔ∏è  Git Config ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Mevcut config'i g√∂r√ºnt√ºle"
	echo "2) Kullanƒ±cƒ± bilgilerini g√ºncelle"
	echo "3) Alias ekle"
	echo "4) Alias sil"
	echo "5) Config deƒüeri ayarla"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-5):${COLORS[NC]} ")" config_choice

	case "$config_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Git Config:${COLORS[NC]}"
		echo -e "\n${COLORS[BOLD]}Global Config:${COLORS[NC]}"
		git config --global --list
		echo -e "\n${COLORS[BOLD]}Yerel Config:${COLORS[NC]}"
		git config --local --list
		;;
	2)
		echo -e "\n${COLORS[BOLD]}Kullanƒ±cƒ± adƒ±nƒ± girin:${COLORS[NC]}"
		read -r git_username
		echo -e "${COLORS[BOLD]}E-posta adresini girin:${COLORS[NC]}"
		read -r git_email
		if [[ -n "$git_username" ]] && [[ -n "$git_email" ]]; then
			echo -e "\n${COLORS[BOLD]}Kapsam se√ßin:${COLORS[NC]}"
			echo "1) Global (t√ºm repolar i√ßin)"
			echo "2) Yerel (sadece bu repo i√ßin)"
			read -r scope_choice

			local scope="--global"
			[[ "$scope_choice" == "2" ]] && scope="--local"

			git config "$scope" user.name "$git_username"
			git config "$scope" user.email "$git_email"
			print_success "Kullanƒ±cƒ± bilgileri g√ºncellendi."
		else
			print_error "Kullanƒ±cƒ± adƒ± veya e-posta bo≈ü olamaz."
		fi
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Alias adƒ±nƒ± girin:${COLORS[NC]}"
		read -r alias_name
		echo -e "${COLORS[BOLD]}Komut dizisini girin:${COLORS[NC]}"
		read -r alias_command
		if [[ -n "$alias_name" ]] && [[ -n "$alias_command" ]]; then
			echo -e "\n${COLORS[BOLD]}Kapsam se√ßin:${COLORS[NC]}"
			echo "1) Global (t√ºm repolar i√ßin)"
			echo "2) Yerel (sadece bu repo i√ßin)"
			read -r scope_choice

			local scope="--global"
			[[ "$scope_choice" == "2" ]] && scope="--local"

			git config "$scope" alias."$alias_name" "$alias_command"
			print_success "Alias ba≈üarƒ±yla eklendi."
		else
			print_error "Alias adƒ± veya komut bo≈ü olamaz."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Silinecek alias adƒ±nƒ± girin:${COLORS[NC]}"
		read -r alias_to_remove
		if [[ -n "$alias_to_remove" ]]; then
			echo -e "\n${COLORS[BOLD]}Kapsam se√ßin:${COLORS[NC]}"
			echo "1) Global (t√ºm repolar i√ßin)"
			echo "2) Yerel (sadece bu repo i√ßin)"
			read -r scope_choice

			local scope="--global"
			[[ "$scope_choice" == "2" ]] && scope="--local"

			git config "$scope" --unset alias."$alias_to_remove"
			print_success "Alias ba≈üarƒ±yla silindi."
		else
			print_error "Alias adƒ± bo≈ü olamaz."
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}Config anahtarƒ±nƒ± girin:${COLORS[NC]}"
		read -r config_key
		echo -e "${COLORS[BOLD]}Config deƒüerini girin:${COLORS[NC]}"
		read -r config_value

		if [[ -n "$config_key" ]]; then
			echo -e "\n${COLORS[BOLD]}Kapsam se√ßin:${COLORS[NC]}"
			echo "1) Global (t√ºm repolar i√ßin)"
			echo "2) Yerel (sadece bu repo i√ßin)"
			read -r scope_choice

			local scope="--global"
			[[ "$scope_choice" == "2" ]] && scope="--local"

			git config "$scope" "$config_key" "$config_value"
			print_success "Config deƒüeri ayarlandƒ±."
		else
			print_error "Config anahtarƒ± bo≈ü olamaz."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Remote repo i≈ülemleri
manage_remotes() {
	echo -e "\n${COLORS[BOLD]}üåê Remote Repo ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Remote repo listesi"
	echo "2) Remote repo ekle"
	echo "3) Remote repo sil"
	echo "4) Remote repo URL g√ºncelle"
	echo "5) Remote branch'leri temizle"
	echo "6) Remote repo'dan fetch"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-6):${COLORS[NC]} ")" remote_choice

	case "$remote_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Remote Repo Listesi:${COLORS[NC]}"
		git remote -v
		;;
	2)
		echo -e "\n${COLORS[BOLD]}Remote repo adƒ±nƒ± girin:${COLORS[NC]}"
		read -r remote_name
		echo -e "${COLORS[BOLD]}Remote repo URL'sini girin:${COLORS[NC]}"
		read -r remote_url
		if [[ -n "$remote_name" ]] && [[ -n "$remote_url" ]]; then
			git remote add "$remote_name" "$remote_url" && print_success "Remote repo ba≈üarƒ±yla eklendi."
		else
			print_error "Remote repo adƒ± veya URL bo≈ü olamaz."
		fi
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Silinecek remote repo adƒ±nƒ± girin:${COLORS[NC]}"
		read -r remote_to_remove
		if [[ -n "$remote_to_remove" ]]; then
			if get_confirmation "Bu remote repo silinecek. Emin misiniz?"; then
				git remote remove "$remote_to_remove" && print_success "Remote repo ba≈üarƒ±yla silindi."
			fi
		else
			print_error "Remote repo adƒ± bo≈ü olamaz."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}G√ºncellenecek remote repo adƒ±nƒ± girin:${COLORS[NC]}"
		read -r remote_to_update
		echo -e "${COLORS[BOLD]}Yeni URL'yi girin:${COLORS[NC]}"
		read -r new_url
		if [[ -n "$remote_to_update" ]] && [[ -n "$new_url" ]]; then
			git remote set-url "$remote_to_update" "$new_url" && print_success "Remote repo URL'si ba≈üarƒ±yla g√ºncellendi."
		else
			print_error "Remote repo adƒ± veya URL bo≈ü olamaz."
		fi
		;;
	5)
		if get_confirmation "Silinmi≈ü remote branch'ler temizlenecek. Emin misiniz?"; then
			git remote prune origin && print_success "Remote branch'ler temizlendi."
		fi
		;;
	6)
		echo -e "\n${COLORS[BOLD]}Fetch yapƒ±lacak remote adƒ±nƒ± girin (bo≈ü bƒ±rakƒ±rsanƒ±z t√ºm remoteler fetch edilecek):${COLORS[NC]}"
		read -r remote_to_fetch

		if [[ -n "$remote_to_fetch" ]]; then
			git fetch "$remote_to_fetch" && print_success "$remote_to_fetch fetch edildi."
		else
			git fetch --all && print_success "T√ºm remoteler fetch edildi."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Stash i≈ülemleri
manage_stash() {
	echo -e "\n${COLORS[BOLD]}üì¶ Stash ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Deƒüi≈üiklikleri stash'e kaydet"
	echo "2) Stash listesini g√∂r√ºnt√ºle"
	echo "3) Stash'ten deƒüi≈üiklikleri geri y√ºkle"
	echo "4) Stash sil"
	echo "5) Belirli dosyalarƒ± stash'e kaydet"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-5):${COLORS[NC]} ")" stash_choice

	case "$stash_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Stash mesajƒ±nƒ± girin (opsiyonel):${COLORS[NC]}"
		read -r stash_msg
		if [[ -n "$stash_msg" ]]; then
			git stash push -m "$stash_msg" && print_success "Deƒüi≈üiklikler stash'e kaydedildi."
		else
			git stash push && print_success "Deƒüi≈üiklikler stash'e kaydedildi."
		fi
		;;
	2)
		echo -e "\n${COLORS[BOLD]}Stash Listesi:${COLORS[NC]}"
		git stash list
		echo ""
		if get_confirmation "Stash detaylarƒ±nƒ± g√∂rmek ister misiniz?"; then
			echo -e "\n${COLORS[BOLD]}G√∂rmek istediƒüiniz stash index'ini girin:${COLORS[NC]}"
			read -r stash_index
			if [[ "$stash_index" =~ ^[0-9]+$ ]]; then
				git stash show -p "stash@{$stash_index}"
			else
				print_error "Ge√ßersiz stash index."
			fi
		fi
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Stash Listesi:${COLORS[NC]}"
		git stash list
		echo -e "\n${COLORS[BOLD]}Geri y√ºklenecek stash index'ini girin:${COLORS[NC]}"
		read -r stash_index
		if [[ "$stash_index" =~ ^[0-9]+$ ]]; then
			echo -e "\n${COLORS[BOLD]}Uygulama y√∂ntemi se√ßin:${COLORS[NC]}"
			echo "1) Apply (stash korunur)"
			echo "2) Pop (stash silinir)"
			read -r apply_method

			if [[ "$apply_method" == "1" ]]; then
				git stash apply "stash@{$stash_index}" && print_success "Stash ba≈üarƒ±yla uygulandƒ± ve korundu."
			elif [[ "$apply_method" == "2" ]]; then
				git stash pop "stash@{$stash_index}" && print_success "Stash ba≈üarƒ±yla uygulandƒ± ve silindi."
			else
				print_error "Ge√ßersiz se√ßim."
			fi
		else
			print_error "Ge√ßersiz stash index."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Stash Listesi:${COLORS[NC]}"
		git stash list
		echo -e "\n${COLORS[BOLD]}Silinecek stash index'ini girin (t√ºm√ºn√º silmek i√ßin 'all' yazƒ±n):${COLORS[NC]}"
		read -r stash_index

		if [[ "$stash_index" == "all" ]]; then
			if get_confirmation "T√úM stash'ler silinecek. Emin misiniz?"; then
				git stash clear && print_success "T√ºm stash'ler ba≈üarƒ±yla silindi."
			fi
		elif [[ "$stash_index" =~ ^[0-9]+$ ]]; then
			if get_confirmation "Bu stash silinecek. Emin misiniz?"; then
				git stash drop "stash@{$stash_index}" && print_success "Stash ba≈üarƒ±yla silindi."
			fi
		else
			print_error "Ge√ßersiz stash index."
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}Stash'e kaydedilecek dosya/dizin adƒ±nƒ± girin:${COLORS[NC]}"
		read -r stash_path

		if [[ -n "$stash_path" ]]; then
			echo -e "\n${COLORS[BOLD]}Stash mesajƒ±nƒ± girin (opsiyonel):${COLORS[NC]}"
			read -r stash_msg

			if [[ -n "$stash_msg" ]]; then
				git stash push -m "$stash_msg" -- "$stash_path" && print_success "Belirtilen dosya/dizin stash'e kaydedildi."
			else
				git stash push -- "$stash_path" && print_success "Belirtilen dosya/dizin stash'e kaydedildi."
			fi
		else
			print_error "Dosya/dizin adƒ± bo≈ü olamaz."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Tag i≈ülemleri
manage_tags() {
	echo -e "\n${COLORS[BOLD]}üè∑Ô∏è  Tag ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Tag listesi"
	echo "2) Yeni tag olu≈ütur"
	echo "3) Tag sil (local)"
	echo "4) Tag sil (remote)"
	echo "5) Tag'leri push et"
	echo "6) Tag detayƒ±nƒ± g√∂r√ºnt√ºle"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-6):${COLORS[NC]} ")" tag_choice

	case "$tag_choice" in
	1)
		echo -e "\n${COLORS[BOLD]}Tag Listesi:${COLORS[NC]}"
		git tag -n
		;;

	2)
		echo -e "\n${COLORS[BOLD]}Yeni tag adƒ±nƒ± girin:${COLORS[NC]}"
		read -r tag_name
		echo -e "${COLORS[BOLD]}Tag a√ßƒ±klamasƒ±nƒ± girin:${COLORS[NC]}"
		read -r tag_message
		if [[ -n "$tag_name" ]]; then
			echo -e "\n${COLORS[BOLD]}Tag t√ºr√º se√ßin:${COLORS[NC]}"
			echo "1) Annotated tag (a√ßƒ±klamalƒ±, √∂nerilir)"
			echo "2) Lightweight tag (basit)"
			read -r tag_type

			if [[ "$tag_type" == "1" ]]; then
				git tag -a "$tag_name" -m "$tag_message" && print_success "Tag ba≈üarƒ±yla olu≈üturuldu."
			elif [[ "$tag_type" == "2" ]]; then
				git tag "$tag_name" && print_success "Lightweight tag ba≈üarƒ±yla olu≈üturuldu."
			else
				print_error "Ge√ßersiz se√ßim."
			fi
		else
			print_error "Tag adƒ± bo≈ü olamaz."
		fi
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Silinecek tag adƒ±nƒ± girin:${COLORS[NC]}"
		read -r tag_to_delete
		if [[ -n "$tag_to_delete" ]]; then
			if get_confirmation "Bu tag silinecek. Emin misiniz?"; then
				git tag -d "$tag_to_delete" && print_success "Tag ba≈üarƒ±yla silindi."
			fi
		else
			print_error "Tag adƒ± bo≈ü olamaz."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Silinecek remote tag adƒ±nƒ± girin:${COLORS[NC]}"
		read -r remote_tag
		if [[ -n "$remote_tag" ]]; then
			if get_confirmation "Bu remote tag silinecek. Emin misiniz?"; then
				git push origin :refs/tags/"$remote_tag" && print_success "Remote tag ba≈üarƒ±yla silindi."
			fi
		else
			print_error "Tag adƒ± bo≈ü olamaz."
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}Push edilecek tag se√ßeneƒüini belirtin:${COLORS[NC]}"
		echo "1) T√ºm tag'leri push et"
		echo "2) Belirli bir tag'i push et"
		read -r tag_push_choice

		if [[ "$tag_push_choice" == "1" ]]; then
			if get_confirmation "T√ºm tag'ler push edilecek. Emin misiniz?"; then
				git push origin --tags && print_success "Tag'ler ba≈üarƒ±yla push edildi."
			fi
		elif [[ "$tag_push_choice" == "2" ]]; then
			echo -e "\n${COLORS[BOLD]}Push edilecek tag adƒ±nƒ± girin:${COLORS[NC]}"
			read -r tag_to_push
			if [[ -n "$tag_to_push" ]]; then
				git push origin refs/tags/"$tag_to_push" && print_success "Tag ba≈üarƒ±yla push edildi."
			else
				print_error "Tag adƒ± bo≈ü olamaz."
			fi
		else
			print_error "Ge√ßersiz se√ßim."
		fi
		;;
	6)
		echo -e "\n${COLORS[BOLD]}Detayƒ±nƒ± g√∂rmek istediƒüiniz tag adƒ±nƒ± girin:${COLORS[NC]}"
		read -r tag_to_show
		if [[ -n "$tag_to_show" ]]; then
			git show "$tag_to_show"
		else
			print_error "Tag adƒ± bo≈ü olamaz."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Dosya se√ßme fonksiyonu
select_files() {
	echo -e "${COLORS[BOLD]}üìã Deƒüi≈üiklik yapƒ±lan dosyalar:${COLORS[NC]}"
	local -a files=()
	local -a statuses=()
	local counter=1

	# Staged ve modified dosyalarƒ± al
	while IFS= read -r line; do
		if [[ -n "$line" ]]; then
			local status=${line:0:2}
			local file=${line:3}
			files+=("$file")
			statuses+=("$status")
			format_file_status "$status" "$file" "$counter"
			((counter++))
		fi
	done < <(git status --porcelain)

	[[ ${#files[@]} -eq 0 ]] && cleanup_and_exit 1 "${COLORS[RED]}‚ùå Eklenecek dosya yok.${COLORS[NC]}"

	echo -e "\n${COLORS[BOLD]}üí° Eklemek istediƒüiniz dosyalarƒ±n numaralarƒ±nƒ± girin ${COLORS[GRAY]}(√∂rn: 1 3 5)${COLORS[NC]}"
	echo -e "${COLORS[GRAY]}üí° T√ºm dosyalarƒ± eklemek i√ßin 'a' yazƒ±n"
	echo -e "üí° ƒ∞≈ülemi iptal etmek i√ßin 'q' yazƒ±n${COLORS[NC]}"
	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz:${COLORS[NC]} ")" choices

	case "$choices" in
	[qQ]) cleanup_and_exit 0 "${COLORS[RED]}‚ùå ƒ∞≈ülem iptal edildi.${COLORS[NC]}" ;;
	[aA])
		get_confirmation "T√ºm dosyalar eklenecek. Emin misiniz?" || cleanup_and_exit 0 "${COLORS[RED]}‚ùå ƒ∞≈ülem iptal edildi.${COLORS[NC]}"
		git add .
		return
		;;
	*)
		local -a selected=()
		for num in $choices; do
			if [[ "$num" =~ ^[0-9]+$ ]] && ((num > 0 && num <= ${#files[@]})); then
				git add "${files[$((num - 1))]}"
				selected+=("${files[$((num - 1))]}")
			fi
		done

		if [[ ${#selected[@]} -gt 0 ]]; then
			print_success "\nSe√ßilen dosyalar eklendi:"
			printf "${COLORS[CYAN]}%s${COLORS[NC]}\n" "${selected[@]}"

			get_confirmation "\nSe√ßiminiz doƒüru mu?" || {
				git restore --staged "${selected[@]}"
				cleanup_and_exit 0 "${COLORS[RED]}‚ùå ƒ∞≈ülem iptal edildi.${COLORS[NC]}"
			}
		else
			cleanup_and_exit 1 "${COLORS[RED]}‚ùå Hi√ßbir dosya se√ßilmedi.${COLORS[NC]}"
		fi
		;;
	esac
}

# Geli≈ümi≈ü dosya deƒüi≈üikliƒüi g√∂r√ºnt√ºleme
view_changes() {
	echo -e "\n${COLORS[BOLD]}üîç Deƒüi≈üiklik G√∂r√ºnt√ºleme${COLORS[NC]}"
	echo "1) √áalƒ±≈üma dizini deƒüi≈üiklikleri (git diff)"
	echo "2) Staged deƒüi≈üiklikler (git diff --staged)"
	echo "3) T√ºm deƒüi≈üiklikler (staged ve unstaged)"
	echo "4) Dosya bazlƒ± deƒüi≈üiklikler"
	echo "5) ƒ∞ki commit arasƒ±ndaki farklar"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-5):${COLORS[NC]} ")" diff_choice

	case "$diff_choice" in
	1)
		git diff
		;;
	2)
		git diff --staged
		;;
	3)
		git diff HEAD
		;;
	4)
		echo -e "\n${COLORS[BOLD]}Deƒüi≈üiklikleri g√∂rmek istediƒüiniz dosyanƒ±n adƒ±nƒ± girin:${COLORS[NC]}"
		read -r file_to_diff
		if [[ -n "$file_to_diff" ]]; then
			if git ls-files --error-unmatch "$file_to_diff" &>/dev/null; then
				git diff -- "$file_to_diff"
			else
				print_error "Dosya bulunamadƒ± veya git tarafƒ±ndan takip edilmiyor."
			fi
		else
			print_error "Dosya adƒ± bo≈ü olamaz."
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}ƒ∞lk commit (eski) ID veya ref girin:${COLORS[NC]}"
		read -r old_commit
		echo -e "${COLORS[BOLD]}ƒ∞kinci commit (yeni) ID veya ref girin (bo≈ü bƒ±rakƒ±rsanƒ±z HEAD kullanƒ±lacak):${COLORS[NC]}"
		read -r new_commit

		if [[ -n "$old_commit" ]]; then
			if [[ -n "$new_commit" ]]; then
				git diff "$old_commit".."$new_commit"
			else
				git diff "$old_commit"..HEAD
			fi
		else
			print_error "ƒ∞lk commit ID bo≈ü olamaz."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Git log g√∂r√ºnt√ºleme
view_logs() {
	echo -e "\n${COLORS[BOLD]}üìã Log G√∂r√ºnt√ºleme${COLORS[NC]}"
	echo "1) Detaylƒ± log g√∂r√ºnt√ºleme"
	echo "2) Branch bazlƒ± log g√∂r√ºnt√ºleme"
	echo "3) Dosya/klas√∂r bazlƒ± log g√∂r√ºnt√ºleme"
	echo "4) Grafik g√∂r√ºn√ºm√º"
	echo "5) Arama bazlƒ± log g√∂r√ºnt√ºleme"
	echo "6) Son n commit'i g√∂r√ºnt√ºle"
	echo "7) Tarih aralƒ±ƒüƒ±na g√∂re log g√∂r√ºnt√ºleme"
	echo "0) Geri d√∂n"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-7):${COLORS[NC]} ")" log_choice

	# Ortak pretty format
	local pretty_format="%C(yellow)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) %C(cyan)[%an]%Creset"

	case "$log_choice" in
	1)
		git log --pretty=format:"$pretty_format" --abbrev-commit
		;;
	2)
		echo -e "\n${COLORS[BOLD]}Branch adƒ±nƒ± girin (bo≈ü bƒ±rakƒ±rsanƒ±z t√ºm branchler g√∂sterilecek):${COLORS[NC]}"
		read -r branch_name
		if [[ -n "$branch_name" ]]; then
			git log "$branch_name" --pretty=format:"$pretty_format" --abbrev-commit
		else
			git log --all --pretty=format:"$pretty_format" --abbrev-commit
		fi
		;;
	3)
		echo -e "\n${COLORS[BOLD]}Dosya/klas√∂r yolunu girin:${COLORS[NC]}"
		read -r file_path
		if [[ -e "$file_path" ]]; then
			git log --follow --pretty=format:"$pretty_format" --abbrev-commit -- "$file_path"
		else
			print_error "Dosya/klas√∂r bulunamadƒ±."
		fi
		;;
	4)
		echo -e "\n${COLORS[BOLD]}G√∂sterilecek commit sayƒ±sƒ±nƒ± girin (bo≈ü bƒ±rakƒ±rsanƒ±z t√ºm√º g√∂sterilecek):${COLORS[NC]}"
		read -r commit_count

		if [[ -n "$commit_count" ]] && [[ "$commit_count" =~ ^[0-9]+$ ]]; then
			git log --graph --pretty=format:"$pretty_format" --abbrev-commit -n "$commit_count"
		else
			git log --graph --pretty=format:"$pretty_format" --abbrev-commit
		fi
		;;
	5)
		echo -e "\n${COLORS[BOLD]}Aranacak metni girin:${COLORS[NC]}"
		read -r search_text

		if [[ -n "$search_text" ]]; then
			echo -e "\n${COLORS[BOLD]}Arama t√ºr√ºn√º se√ßin:${COLORS[NC]}"
			echo "1) Commit mesajlarƒ±nda ara"
			echo "2) Commit i√ßeriklerinde ara (yava≈ü olabilir)"
			echo "3) Commit yazarlarƒ±nda ara"
			read -r search_type

			case "$search_type" in
			1)
				git log --pretty=format:"$pretty_format" --abbrev-commit --grep="$search_text"
				;;
			2)
				git log --pretty=format:"$pretty_format" --abbrev-commit -p -S"$search_text"
				;;
			3)
				git log --pretty=format:"$pretty_format" --abbrev-commit --author="$search_text"
				;;
			*)
				print_error "Ge√ßersiz se√ßim."
				;;
			esac
		else
			print_error "Arama metni bo≈ü olamaz."
		fi
		;;
	6)
		echo -e "\n${COLORS[BOLD]}G√∂sterilecek commit sayƒ±sƒ±nƒ± girin:${COLORS[NC]}"
		read -r n_commits

		if [[ -n "$n_commits" ]] && [[ "$n_commits" =~ ^[0-9]+$ ]]; then
			git log --pretty=format:"$pretty_format" --abbrev-commit -n "$n_commits"
		else
			print_error "Ge√ßerli bir sayƒ± girmelisiniz."
		fi
		;;
	7)
		echo -e "\n${COLORS[BOLD]}Ba≈ülangƒ±√ß tarihini girin (YYYY-MM-DD):${COLORS[NC]}"
		read -r start_date
		echo -e "${COLORS[BOLD]}Biti≈ü tarihini girin (YYYY-MM-DD):${COLORS[NC]}"
		read -r end_date

		if [[ -n "$start_date" ]] && [[ -n "$end_date" ]]; then
			git log --pretty=format:"$pretty_format" --abbrev-commit --after="$start_date" --before="$end_date"
		else
			print_error "Tarih alanlarƒ± bo≈ü olamaz."
		fi
		;;
	0) return ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Commit ve push i≈ülemi fonksiyonu
perform_commit_push() {
	# G√ºncel deƒüi≈üiklikleri kontrol et
	print_info "üì• Uzak depodaki deƒüi≈üiklikler kontrol ediliyor..."
	git fetch

	# Uzak depodan geri miyiz?
	local behind_count
	behind_count=$(git rev-list HEAD..@{u} --count 2>/dev/null || echo "0")
	if ((behind_count > 0)); then
		print_warning "Dalƒ±nƒ±z $behind_count commit geride."
		if get_confirmation "üìù Deƒüi≈üiklikler √ßekilsin mi?"; then
			git pull || cleanup_and_exit 1 "${COLORS[RED]}‚ùå Pull ba≈üarƒ±sƒ±z oldu.${COLORS[NC]}"
		fi
	fi

	# Dosya se√ßimi yap
	select_files

	# Commit mesajƒ±nƒ± iste
	echo -e "\n${COLORS[BOLD]}üí≠ Commit mesajƒ±nƒ± girin:${COLORS[NC]}"
	read -r commit_msg

	[[ -z "$commit_msg" ]] && cleanup_and_exit 1 "${COLORS[RED]}‚ùå Commit mesajƒ± bo≈ü olamaz.${COLORS[NC]}"

	# Commit t√ºr√º sorusu
	echo -e "\n${COLORS[BOLD]}Commit t√ºr√ºn√º se√ßin:${COLORS[NC]}"
	echo "1) Normal commit"
	echo "2) Signed commit (GPG ile imzalƒ±)"
	echo "3) Amend commit (son commit'i deƒüi≈ütir)"
	read -r commit_type

	# Son kontrol ve commit
	get_confirmation "üìù Commit yapƒ±lsƒ±n mƒ±?" || {
		git restore --staged .
		cleanup_and_exit 0 "${COLORS[RED]}‚ùå ƒ∞≈ülem iptal edildi.${COLORS[NC]}"
	}

	print_info "üíæ Commit yapƒ±lƒ±yor..."

	case "$commit_type" in
	1)
		git commit -m "$commit_msg"
		;;
	2)
		git commit -S -m "$commit_msg"
		;;
	3)
		if get_confirmation "Son commit deƒüi≈ütirilecek. Bu i≈ülem ge√ßmi≈üi deƒüi≈ütirecek. Emin misiniz?"; then
			git commit --amend -m "$commit_msg"
		else
			git commit -m "$commit_msg"
		fi
		;;
	*)
		# Varsayƒ±lan olarak normal commit yap
		git commit -m "$commit_msg"
		;;
	esac

	# Push i≈ülemi
	if get_confirmation "‚òÅÔ∏è  Push yapƒ±lsƒ±n mƒ±?"; then
		# Push t√ºr√º sorusu
		echo -e "\n${COLORS[BOLD]}Push t√ºr√ºn√º se√ßin:${COLORS[NC]}"
		echo "1) Normal push"
		echo "2) Force push (ge√ßmi≈üi deƒüi≈ütirecek, dikkatli kullanƒ±n!)"
		read -r push_type

		local current_branch
		current_branch=$(git rev-parse --abbrev-ref HEAD)

		case "$push_type" in
		1)
			if git push origin "$current_branch"; then
				print_success "‚ú® Tamamlandƒ±! Deƒüi≈üiklikler ba≈üarƒ±yla g√∂nderildi."
			else
				cleanup_and_exit 1 "${COLORS[RED]}‚ùå Push ba≈üarƒ±sƒ±z oldu.${COLORS[NC]}"
			fi
			;;
		2)
			if get_confirmation "‚ùó Force push, uzak repodaki ge√ßmi≈üi deƒüi≈ütirecek ve takƒ±m √ºyelerinde sorunlara yol a√ßabilir. Emin misiniz?"; then
				if git push --force origin "$current_branch"; then
					print_success "‚ú® Tamamlandƒ±! Deƒüi≈üiklikler zorla g√∂nderildi."
				else
					cleanup_and_exit 1 "${COLORS[RED]}‚ùå Force push ba≈üarƒ±sƒ±z oldu.${COLORS[NC]}"
				fi
			else
				if get_confirmation "Normal push denemek ister misiniz?"; then
					if git push origin "$current_branch"; then
						print_success "‚ú® Tamamlandƒ±! Deƒüi≈üiklikler ba≈üarƒ±yla g√∂nderildi."
					else
						cleanup_and_exit 1 "${COLORS[RED]}‚ùå Push ba≈üarƒ±sƒ±z oldu.${COLORS[NC]}"
					fi
				else
					print_warning "Push i≈ülemi iptal edildi."
				fi
			fi
			;;
		*)
			if git push origin "$current_branch"; then
				print_success "‚ú® Tamamlandƒ±! Deƒüi≈üiklikler ba≈üarƒ±yla g√∂nderildi."
			else
				cleanup_and_exit 1 "${COLORS[RED]}‚ùå Push ba≈üarƒ±sƒ±z oldu.${COLORS[NC]}"
			fi
			;;
		esac
	else
		print_warning "Push i≈ülemi iptal edildi."
	fi
}

# Ana men√º
show_menu() {
	echo -e "\n${COLORS[BOLD]}üîß Git ƒ∞≈ülemleri${COLORS[NC]}"
	echo "1) Commit ve Push"
	echo "2) Stash ƒ∞≈ülemleri"
	echo "3) Log G√∂r√ºnt√ºleme"
	echo "4) Branch ƒ∞≈ülemleri"
	echo "5) Tag ƒ∞≈ülemleri"
	echo "6) Remote Repo ƒ∞≈ülemleri"
	echo "7) Git Config ƒ∞≈ülemleri"
	echo "8) Git Clean ƒ∞≈ülemleri"
	echo "9) Deƒüi≈üiklik G√∂r√ºnt√ºleme"
	echo "0) √áƒ±kƒ±≈ü"

	read -r -p "$(echo -e "${COLORS[BOLD]}Se√ßiminiz (0-9):${COLORS[NC]} ")" menu_choice

	case "$menu_choice" in
	1) perform_commit_push ;;
	2) manage_stash ;;
	3) view_logs ;;
	4) manage_branches ;;
	5) manage_tags ;;
	6) manage_remotes ;;
	7) manage_config ;;
	8) manage_clean ;;
	9) view_changes ;;
	0) cleanup_and_exit 0 "${COLORS[GREEN]}üëã G√ºle g√ºle!${COLORS[NC]}" ;;
	*) print_error "Ge√ßersiz se√ßim." ;;
	esac
}

# Git s√ºr√ºm bilgisini kontrol eden fonksiyon
check_git_version() {
	local git_version
	if command -v git &>/dev/null; then
		git_version=$(git --version | sed -E 's/git version ([0-9]+\.[0-9]+).*/\1/')
		if (($(echo "$git_version < 2.23" | bc -l))); then
			print_warning "Git versiyonunuz ($git_version) eski olabilir. Bazƒ± √∂zellikler √ßalƒ±≈ümayabilir."
			return 1
		fi
	else
		print_error "Git y√ºkl√º deƒüil!"
		return 2
	fi
	return 0
}

# Yardƒ±m men√ºs√º
show_help() {
	echo -e "\n${COLORS[BOLD]}üìö NixOSC Yardƒ±m${COLORS[NC]}"
	echo -e "Kullanƒ±m: $(basename "$0") [parametre]"
	echo -e "\nParametreler:"
	echo -e "  -h, --help     : Bu yardƒ±m mesajƒ±nƒ± g√∂sterir"
	echo -e "  -v, --version  : Versiyon bilgisini g√∂sterir"
	echo -e "  --no-color     : Renkli √ßƒ±ktƒ±yƒ± devre dƒ±≈üƒ± bƒ±rakƒ±r"
	echo -e "\nA√ßƒ±klama:"
	echo -e "  NixOSC, Git i≈ülemlerini kolayla≈ütƒ±rmak i√ßin tasarlanmƒ±≈ü bir komut satƒ±rƒ± aracƒ±dƒ±r."
	echo -e "  Men√º tabanlƒ± bir aray√ºz sunar ve Git i≈ülemlerini daha kullanƒ±cƒ± dostu hale getirir."
	echo -e "\nTemel Komutlar:"
	echo -e "  1) Commit ve Push: Deƒüi≈üiklikleri se√ßip commit eder ve uzak repoya g√∂nderir"
	echo -e "  2) Stash ƒ∞≈ülemleri: Ge√ßici deƒüi≈üiklikleri saklar ve geri getirir"
	echo -e "  3) Log G√∂r√ºnt√ºleme: Commit ge√ßmi≈üini √ße≈üitli formatlarda g√∂r√ºnt√ºler"
	echo -e "  4) Branch ƒ∞≈ülemleri: Branch olu≈üturma, silme ve ge√ßi≈ü yapma i≈ülemleri"
	echo -e "  5) Tag ƒ∞≈ülemleri: S√ºr√ºm etiketleme ve y√∂netimi"
	echo -e "  6) Remote Repo ƒ∞≈ülemleri: Uzak repo ayarlarƒ± ve y√∂netimi"
	echo -e "  7) Git Config ƒ∞≈ülemleri: Git yapƒ±landƒ±rma ayarlarƒ±"
	echo -e "  8) Git Clean ƒ∞≈ülemleri: Takip edilmeyen dosyalarƒ± y√∂netme"
	echo -e "  9) Deƒüi≈üiklik G√∂r√ºnt√ºleme: Dosya deƒüi≈üikliklerini inceleme"
}

# Versiyon bilgisini g√∂ster
show_version() {
	echo -e "${COLORS[BOLD]}NixOSC${COLORS[NC]} - Version 1.1.0"
	echo -e "Tarih: 2025-04-18"
	echo -e "Yazar: Kenan Pelit"
	echo -e "Repository: https://github.com/kenanpelit/nixosc"
}

# Renk desteƒüini devre dƒ±≈üƒ± bƒ±rakma
disable_colors() {
	for key in "${!COLORS[@]}"; do
		COLORS["$key"]=""
	done
	print_info "Renkli √ßƒ±ktƒ± devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±."
}

# Ana fonksiyon
main() {
	# Komut satƒ±rƒ± parametrelerini i≈üle
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			show_help
			exit 0
			;;
		-v | --version)
			show_version
			exit 0
			;;
		--no-color)
			disable_colors
			shift
			;;
		*)
			print_error "Bilinmeyen parametre: $1"
			echo "Yardƒ±m i√ßin: $(basename "$0") --help"
			exit 1
			;;
		esac
	done

	# Git kurulumunu kontrol et
	check_git_setup

	# Git s√ºr√ºm√ºn√º kontrol et
	check_git_version

	while true; do
		show_menu
	done
}

# Scripti √ßalƒ±≈ütƒ±r
main "$@"
