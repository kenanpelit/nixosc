#!/usr/bin/env bash
#######################################
#
# Version: 1.0.0
# Date: 2024-12-12
# Author: Kenan Pelit
# Repository: github.com/kenanpelit/dotfiles
# Description: TmuxManager - Gelişmiş Tmux Oturum Yöneticisi
#
# Bu script tmux oturumlarını gelişmiş özelliklerle yönetmek için tasarlanmıştır.
# Temel özellikleri:
#
# - Oturum Yönetimi:
#   - Akıllı oturum isimlendirme (git/dizin bazlı)
#   - Oturum oluşturma, bağlanma, sonlandırma
#   - Oturum arası geçiş yapma
#   - Otomatik pencere yeniden isimlendirme
#
# - Terminal Entegrasyonu:
#   - Kitty ve Alacritty desteği
#   - Terminal sınıf ve başlık özelleştirme
#   - Çalışma dizini kontrolü
#
# - Güvenlik ve Doğrulama:
#   - Oturum ismi doğrulama
#   - Hata yakalama ve raporlama
#   - Renkli terminal çıktıları
#
# - Ek Özellikler:
#   - Git entegrasyonu
#   - Detaylı yardım menüsü
#   - Duruma dayalı pencere açma
#
# Kullanım:
# ./tmux-manager [seçenekler] [oturum_adı]
#
# License: MIT
#
#######################################
# Hata yönetimi
set -euo pipefail

# Renk tanımlamaları
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Mesaj fonksiyonları
print_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARN]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
print_status() { echo -e "${BLUE}[STATUS]${NC} $1"; }

# Yardımcı fonksiyonlar
has_session_exact() {
  if ! command -v tmux >/dev/null 2>&1; then
    print_error "tmux yüklü değil"
    return 1
  fi
  tmux list-sessions -F "#{session_name}" 2>/dev/null | grep -qx "$1"
}

validate_session_name() {
  local name="$1"
  if [[ "$name" =~ [^a-zA-Z0-9_-] ]]; then
    print_error "Geçersiz session ismi. Sadece harfler, rakamlar, tire ve alt çizgi kullanılabilir."
    return 1
  fi
  return 0
}

get_session_name() {
  local dir_name="$(basename "$(pwd)")"
  local git_name="$(git rev-parse --git-dir 2>/dev/null)"

  if [[ -n "$git_name" ]]; then
    echo "$(basename "$(git rev-parse --show-toplevel)")"
  else
    echo "$dir_name"
  fi
}

# Terminal işlemleri
check_terminal() {
  if command -v kitty >/dev/null 2>&1; then
    echo "kitty"
  elif command -v alacritty >/dev/null 2>&1; then
    echo "alacritty"
  else
    echo "x-terminal-emulator"
  fi
}

open_terminal() {
  local terminal_type="$1"
  local session_name="$2"
  local class_name="tmux-$session_name"
  local title="Tmux: $session_name"

  case "$terminal_type" in
  kitty)
    if ! command -v kitty >/dev/null 2>&1; then
      print_error "Kitty terminal yüklü değil!"
      return 1
    fi
    kitty --class="$class_name" \
      --title="$title" \
      --directory="$PWD" \
      -e bash -c "tmux new-session -A -s \"$session_name\"" &
    ;;
  alacritty)
    if ! command -v alacritty >/dev/null 2>&1; then
      print_error "Alacritty terminal yüklü değil!"
      return 1
    fi
    alacritty --class "$class_name" \
      --title "$title" \
      --working-directory "$PWD" \
      -e bash -c "tmux new-session -A -s \"$session_name\"" &
    ;;
  *)
    print_error "Desteklenmeyen terminal tipi: $terminal_type"
    return 1
    ;;
  esac
}

# Tmux işlemleri
attach_or_switch() {
  local session_name="$1"
  if [[ -n "${TMUX:-}" ]]; then
    tmux switch-client -t "$session_name" || print_error "Session '$session_name'e geçilemedi."
  else
    tmux attach-session -t "$session_name" || print_error "Session '$session_name'e bağlanılamadı."
  fi
}

list_sessions() {
  print_info "Mevcut sessions:"
  tmux list-sessions 2>/dev/null || print_warning "Aktif session yok"
}

kill_session() {
  local session_name="$1"
  if has_session_exact "$session_name"; then
    tmux kill-session -t "$session_name" && print_info "Session '$session_name' sonlandırıldı"
  else
    print_error "Session '$session_name' bulunamadı"
    return 1
  fi
}

create_session() {
  local session_name="$1"
  if ! validate_session_name "$session_name"; then
    return 1
  fi

  if has_session_exact "$session_name"; then
    if tmux list-sessions | grep -q "^${session_name}: .* (attached)$"; then
      print_warning "Oturum '${session_name}' zaten bağlı, yeni pencere açılıyor..."
      local window_count
      window_count=$(tmux list-windows -t "$session_name" | wc -l)
      print_status "Mevcut pencere sayısı: $window_count"
      tmux new-window -t "$session_name"
    fi
    attach_or_switch "$session_name"
  else
    print_info "Yeni tmux oturumu '${session_name}' başlatılıyor..."
    tmux new-session -d -s "$session_name" && attach_or_switch "$session_name"
  fi
}

# Kullanım bilgisi
show_help() {
  cat <<EOF
Gelişmiş Tmux Session Manager

Kullanım: $(basename "$0") [seçenekler] [session_ismi]

Seçenekler:
    -l, --list          Mevcut session'ları listele
    -k, --kill <isim>   Belirtilen session'ı sonlandır
    -n, --new <isim>    Yeni bir session oluştur
    -a, --attach <isim> Var olan session'a bağlan
    -t, --terminal      Yeni terminal penceresinde session aç
                        Örnek: -t kitty mysession
    -d, --detach        Session'dan ayrıl
    -h, --help          Bu yardım mesajını göster

Notlar:
    - Parametre vermezseniz bulunduğunuz dizin ismiyle session oluşturulur
    - Git reposunda iseniz repo ismi session ismi olarak kullanılır
    - Kitty ve Alacritty terminal desteği
    - Session isimleri sadece harf, rakam, tire ve alt çizgi içerebilir
EOF
}

# Ana işlev
main() {
  case "${1:-}" in
  -h | --help)
    show_help
    ;;
  -l | --list)
    list_sessions
    ;;
  -k | --kill)
    if [ -z "${2:-}" ]; then
      print_error "Session ismi belirtilmedi"
      return 1
    fi
    kill_session "$2"
    ;;
  -n | --new)
    if [ -z "${2:-}" ]; then
      print_error "Session ismi belirtilmedi"
      return 1
    fi
    create_session "$2"
    ;;
  -t | --terminal)
    if [ -z "${2:-}" ] || [ -z "${3:-}" ]; then
      print_error "Terminal tipi ve session ismi belirtilmeli"
      return 1
    fi
    open_terminal "$2" "$3"
    ;;
  -d | --detach)
    tmux detach-client
    ;;
  -a | --attach)
    if [ -z "${2:-}" ]; then
      print_error "Session ismi belirtilmedi"
      return 1
    fi
    if has_session_exact "$2"; then
      attach_or_switch "$2"
    else
      print_error "Session '$2' bulunamadı"
      return 1
    fi
    ;;
  *)
    local session_name="${1:-$(get_session_name)}"
    create_session "$session_name"
    ;;
  esac
}

# Otomatik pencere yeniden isimlendirme
if [[ -n "${TMUX:-}" ]]; then
  LAST_DIR=""
  function precmd() {
    local current_dir="$(pwd)"
    if [[ "$LAST_DIR" != "$current_dir" ]]; then
      tmux rename-window "$(basename "$current_dir")"
    fi
    LAST_DIR="$current_dir"
  }
fi

# Scripti çalıştır
main "$@"
